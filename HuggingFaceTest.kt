import com.tayrinn.aiadvent.data.api.OpenAIApiImplInternal
import com.tayrinn.aiadvent.data.model.OpenAIRequest
import com.tayrinn.aiadvent.data.model.OpenAIMessage
import kotlinx.coroutines.runBlocking

fun main() = runBlocking {
    println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hugging Face API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

    try {
        val api = OpenAIApiImplInternal()

        val request = OpenAIRequest(
            model = "deepseek-ai/DeepSeek-V3-0324",
            messages = listOf(
                OpenAIMessage(
                    role = "user",
                    content = "How many G in huggingface?"
                )
            ),
            maxCompletionTokens = 100
        )

        println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face API...")
        val response = api.chatCompletion(request)

        println("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
        println("   ID: ${response.id}")
        println("   Model: ${response.model}")
        println("   Content: ${response.choices.firstOrNull()?.message?.content}")

        if (response.choices.isNotEmpty()) {
            val content = response.choices.first().message.content
            if (content.isNotBlank()) {
                println("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face API")
            } else {
                println("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            }
        } else {
            println("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç choices")
        }

    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${e.message}")
        e.printStackTrace()
    }
}
