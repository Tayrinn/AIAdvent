package com.tayrinn.aiadvent.server

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.server.http.content.*
import io.ktor.server.request.receive
import io.ktor.server.request.receiveText
import io.ktor.server.response.respond
import io.ktor.server.response.respondBytes
import io.ktor.server.response.respondText
import io.ktor.server.routing.get
import io.ktor.server.routing.post
import io.ktor.server.routing.routing
import io.ktor.http.HttpMethod
import io.ktor.http.HttpStatusCode
import io.ktor.http.ContentType
import io.ktor.http.HttpHeaders
import io.ktor.serialization.kotlinx.json.json
import kotlinx.coroutines.delay
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.withTimeoutOrNull
import kotlinx.coroutines.withContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import java.awt.Color
import java.awt.Font
import java.awt.Graphics2D
import java.awt.image.BufferedImage
import java.io.ByteArrayOutputStream
import javax.imageio.ImageIO
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.io.File

/**
 * –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ REST API
 */

/**
 * –°–æ–∑–¥–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞
 */
fun createPlaceholderImage(prompt: String, width: Int, height: Int): ByteArray? {
    return try {
        println("üé® –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞...")

        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        val image = BufferedImage(width, height, BufferedImage.TYPE_INT_RGB)
        val graphics = image.graphics as Graphics2D

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
        graphics.setRenderingHint(java.awt.RenderingHints.KEY_ANTIALIASING, java.awt.RenderingHints.VALUE_ANTIALIAS_ON)
        graphics.setRenderingHint(java.awt.RenderingHints.KEY_TEXT_ANTIALIASING, java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON)

        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        val gradient = java.awt.GradientPaint(0f, 0f, Color(135, 206, 235), width.toFloat(), height.toFloat(), Color(255, 182, 193))
        graphics.paint = gradient
        graphics.fillRect(0, 0, width, height)

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
        graphics.color = Color(70, 130, 180)
        graphics.stroke = java.awt.BasicStroke(3f)
        graphics.drawRect(10, 10, width - 20, height - 20)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        var fontSize = 24
        var font = Font("Arial", Font.BOLD, fontSize)
        var fontMetrics = graphics.getFontMetrics(font)

        // –ü–æ–¥–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        while (fontMetrics.stringWidth("Kandinsky Placeholder") > width - 40 && fontSize > 12) {
            fontSize -= 2
            font = Font("Arial", Font.BOLD, fontSize)
            fontMetrics = graphics.getFontMetrics(font)
        }

        // –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        graphics.color = Color.WHITE
        graphics.font = font
        val title = "Kandinsky Placeholder"
        val titleX = (width - fontMetrics.stringWidth(title)) / 2
        val titleY = 50 + fontMetrics.ascent
        graphics.drawString(title, titleX, titleY)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        fontSize = 18
        font = Font("Arial", Font.PLAIN, fontSize)
        fontMetrics = graphics.getFontMetrics(font)

        // –ü–æ–¥–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        while (fontMetrics.stringWidth(prompt) > width - 40 && fontSize > 10) {
            fontSize -= 1
            font = Font("Arial", Font.PLAIN, fontSize)
            fontMetrics = graphics.getFontMetrics(font)
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        val lines = wrapText(prompt, width - 40, fontMetrics)

        // –†–∏—Å—É–µ–º –ø—Ä–æ–º–ø—Ç
        graphics.color = Color(255, 255, 255)
        graphics.font = font

        var y = titleY + 40
        for (line in lines) {
            val lineX = (width - fontMetrics.stringWidth(line)) / 2
            graphics.drawString(line, lineX, y)
            y += fontMetrics.height + 5
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ
        graphics.color = Color(200, 200, 200)
        graphics.font = Font("Arial", Font.PLAIN, 12)
        val sizeText = "${width} x ${height}"
        val sizeX = width - graphics.getFontMetrics().stringWidth(sizeText) - 20
        val sizeY = height - 20
        graphics.drawString(sizeText, sizeX, sizeY)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        val outputStream = ByteArrayOutputStream()
        ImageIO.write(image, "PNG", outputStream)
        val imageBytes = outputStream.toByteArray()

        println("‚úÖ –ó–∞–≥–ª—É—à–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        println("üìä –†–∞–∑–º–µ—Ä: ${imageBytes.size} –±–∞–π—Ç")

        imageBytes
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏: ${e.message}")
        e.printStackTrace()
        null
    }
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —à–∏—Ä–∏–Ω—ã
 */
private fun wrapText(text: String, maxWidth: Int, fontMetrics: java.awt.FontMetrics): List<String> {
    val words = text.split(" ")
    val lines = mutableListOf<String>()
    var currentLine = ""

    for (word in words) {
        val testLine = if (currentLine.isEmpty()) word else "$currentLine $word"
        if (fontMetrics.stringWidth(testLine) <= maxWidth) {
            currentLine = testLine
        } else {
            if (currentLine.isNotEmpty()) {
                lines.add(currentLine)
            }
            currentLine = word
        }
    }

    if (currentLine.isNotEmpty()) {
        lines.add(currentLine)
    }

    return lines
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Kandinsky API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —á–∏—Å—Ç–æ–≥–æ Kotlin
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ –¥–∏—Å–∫
 */
suspend fun generateImageWithKandinsky(
    prompt: String,
    style: String = "DEFAULT",
    width: Int = 1024,
    height: Int = 1024
): ByteArray? {
    return try {
        println("üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kandinsky API...")
        println("üìù –ü—Ä–æ–º–ø—Ç: $prompt")
        println("üé≠ –°—Ç–∏–ª—å: $style")
        println("üìê –†–∞–∑–º–µ—Ä: ${width}x${height}")

        // –°–æ–∑–¥–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞
        println("üé® –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        createPlaceholderImage(prompt, width, height)
    } catch (e: Exception) {
        println("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e")
        e.printStackTrace()
        null
    }
}

@Serializable
data class ImageGenerationRequest(
    val prompt: String,
    val style: String = "DEFAULT",
    val width: Int = 1024,
    val height: Int = 1024,
    val negativePrompt: String = ""
)

@Serializable
data class ImageGenerationResponse(
    val success: Boolean,
    val message: String,
    val imageUrl: String? = null,
    val fileName: String? = null,
    val error: String? = null
)

fun main() {
    println("üöÄ –ó–∞–ø—É—Å–∫ AI Image Generation Web Server...")
    println("üìç –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:8080")
    println("üåê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤ –≤ —Ä–æ—É—Ç–µ—Ä–µ")
    println("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    println("   POST /api/generate-image - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Kandinsky")
    println("   GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    println("   GET /generate - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    println("   GET / - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
    println()

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
    val currentDir = File(System.getProperty("user.dir")).absolutePath
    val projectDir = if (currentDir.endsWith("shared")) {
        File(currentDir).parent
    } else {
        currentDir
    }
    val imagesDir = File("$projectDir/shared/images").apply {
        mkdirs()
        println("üìÅ –ü–∞–ø–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${absolutePath}")
    }

    val json = Json {
        ignoreUnknownKeys = true
        prettyPrint = true
        encodeDefaults = true
    }

    embeddedServer(Netty, port = 8080, host = "0.0.0.0") {
        routing {
            // –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            get("/generate") {
                call.respondText(
                    """
                    <!DOCTYPE html>
                    <html lang="ru">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <title>üé® Kandinsky Image Generator</title>
                        <style>
                            body {
                                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                                max-width: 800px;
                                margin: 0 auto;
                                padding: 20px;
                                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                min-height: 100vh;
                                color: white;
                            }
                            .container {
                                background: rgba(255, 255, 255, 0.1);
                                backdrop-filter: blur(10px);
                                border-radius: 20px;
                                padding: 30px;
                                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
                            }
                            h1 {
                                text-align: center;
                                margin-bottom: 30px;
                                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
                            }
                            .form-group {
                                margin-bottom: 20px;
                            }
                            label {
                                display: block;
                                margin-bottom: 8px;
                                font-weight: bold;
                                color: #e8eaf6;
                            }
                            input, select, textarea {
                                width: 100%;
                                padding: 12px;
                                border: none;
                                border-radius: 10px;
                                background: rgba(255, 255, 255, 0.9);
                                color: #333;
                                font-size: 16px;
                                box-sizing: border-box;
                            }
                            textarea {
                                resize: vertical;
                                min-height: 100px;
                            }
                            .button-row {
                                display: flex;
                                gap: 10px;
                                margin-bottom: 20px;
                            }
                            button {
                                padding: 12px 24px;
                                border: none;
                                border-radius: 10px;
                                font-size: 16px;
                                font-weight: bold;
                                cursor: pointer;
                                transition: all 0.3s ease;
                                flex: 1;
                            }
                            .generate-btn {
                                background: linear-gradient(45deg, #ff6b6b, #ffa500);
                                color: white;
                            }
                            .generate-btn:hover {
                                transform: translateY(-2px);
                                box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
                            }
                            .random-btn {
                                background: linear-gradient(45deg, #74b9ff, #0984e3);
                                color: white;
                            }
                            .random-btn:hover {
                                transform: translateY(-2px);
                                box-shadow: 0 4px 15px rgba(116, 185, 255, 0.4);
                            }
                            .result {
                                margin-top: 30px;
                                padding: 20px;
                                border-radius: 10px;
                                display: none;
                            }
                            .success {
                                background: rgba(46, 204, 113, 0.2);
                                border: 2px solid #2ecc71;
                            }
                            .error {
                                background: rgba(231, 76, 60, 0.2);
                                border: 2px solid #e74c3c;
                            }
                            .loading {
                                text-align: center;
                                color: #f39c12;
                                font-weight: bold;
                            }
                            .image-container {
                                text-align: center;
                                margin-top: 20px;
                            }
                            .image-container img {
                                max-width: 100%;
                                border-radius: 10px;
                                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
                            }
                            .examples {
                                margin-top: 30px;
                                padding: 20px;
                                background: rgba(255, 255, 255, 0.1);
                                border-radius: 10px;
                            }
                            .example-btn {
                                background: rgba(255, 255, 255, 0.2);
                                color: white;
                                border: 1px solid rgba(255, 255, 255, 0.3);
                                margin: 5px;
                                padding: 8px 12px;
                                border-radius: 5px;
                                cursor: pointer;
                                font-size: 14px;
                            }
                            .example-btn:hover {
                                background: rgba(255, 255, 255, 0.3);
                            }
                        </style>
                    </head>
                    <body>
                        <div class="container">
                            <h1>üé® Kandinsky Image Generator</h1>

                            <form id="imageForm">
                                <div class="form-group">
                                    <label for="prompt">üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</label>
                                    <textarea id="prompt" name="prompt" placeholder="–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..." required></textarea>
                                </div>

                                <div class="button-row">
                                    <div class="form-group" style="flex: 1;">
                                        <label for="style">üé≠ –°—Ç–∏–ª—å:</label>
                                        <select id="style" name="style">
                                            <option value="DEFAULT">DEFAULT</option>
                                            <option value="KANDINSKY">KANDINSKY</option>
                                            <option value="UHD">UHD</option>
                                            <option value="ANIME">ANIME</option>
                                        </select>
                                    </div>
                                    <div class="form-group" style="flex: 1;">
                                        <label for="width">üìê –®–∏—Ä–∏–Ω–∞:</label>
                                        <input type="number" id="width" name="width" value="1024" min="256" max="2048" step="64">
                                    </div>
                                    <div class="form-group" style="flex: 1;">
                                        <label for="height">üìê –í—ã—Å–æ—Ç–∞:</label>
                                        <input type="number" id="height" name="height" value="1024" min="256" max="2048" step="64">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="negativePrompt">üö´ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</label>
                                    <input type="text" id="negativePrompt" name="negativePrompt" placeholder="–ß—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...">
                                </div>

                                <div class="button-row">
                                    <button type="submit" class="generate-btn">üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
                                    <button type="button" class="random-btn" onclick="generateRandom()">üé≤ –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç</button>
                                </div>
                            </form>

                            <div id="result" class="result">
                                <div id="loading" class="loading" style="display: none;">
                                    ‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...
                                </div>
                                <div id="success" class="success" style="display: none;">
                                    ‚úÖ <span id="successMessage"></span>
                                    <div class="image-container">
                                        <img id="generatedImage" src="" alt="Generated Image" style="display: none;">
                                    </div>
                                </div>
                                <div id="error" class="error" style="display: none;">
                                    ‚ùå <span id="errorMessage"></span>
                                </div>
                            </div>

                            <div class="examples">
                                <h3>üí° –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:</h3>
                                <button class="example-btn" onclick="setPrompt('–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ')">üåÖ –ó–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏</button>
                                <button class="example-btn" onclick="setPrompt('–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ —Å—Ç–∏–º–ø–∞–Ω–∫, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è')">üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å</button>
                                <button class="example-btn" onclick="setPrompt('–≤–æ–ª—à–µ–±–Ω—ã–π –ª–µ—Å —Å –µ–¥–∏–Ω–æ—Ä–æ–≥–∞–º–∏, —Ñ—ç–Ω—Ç–µ–∑–∏ –∞—Ä—Ç')">ü¶Ñ –í–æ–ª—à–µ–±–Ω—ã–π –ª–µ—Å</button>
                                <button class="example-btn" onclick="setPrompt('–∫–∏–±–µ—Ä–ø–∞–Ω–∫ –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ –Ω–æ—á—å—é, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ–≥–Ω–∏')">üåÜ –ö–∏–±–µ—Ä–ø–∞–Ω–∫ –≥–æ—Ä–æ–¥</button>
                                <button class="example-btn" onclick="setPrompt('–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç–∏–ª–µ –í–∞–Ω –ì–æ–≥–∞')">üé® –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ</button>
                                <button class="example-btn" onclick="setPrompt('–º–∏–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º —à–ª–µ–º–µ')">üê± –ö–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ</button>
                            </div>
                        </div>

                        <script>
                            const form = document.getElementById('imageForm');
                            const result = document.getElementById('result');
                            const loading = document.getElementById('loading');
                            const success = document.getElementById('success');
                            const error = document.getElementById('error');
                            const generatedImage = document.getElementById('generatedImage');

                            const randomPrompts = [
                                '—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –ø–æ–¥ –≤–æ–¥–æ–π, –±–∏–æ–ª—é–º–∏–Ω–µ—Å—Ü–µ–Ω—Ç–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞',
                                '–¥—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω —Å–ø—è—â–∏–π –Ω–∞ –≥–æ—Ä–µ —Å–æ–∫—Ä–æ–≤–∏—â, –º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å',
                                '–∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è –æ—Ä–±–∏—Ç–∏—Ä—É—é—â–∞—è –≤–æ–∫—Ä—É–≥ –≥–∞–∑–æ–≤–æ–≥–æ –≥–∏–≥–∞–Ω—Ç–∞',
                                '–≤–æ–ª—à–µ–±–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏, –≥–æ—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å',
                                '—Ä–æ–±–æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫ —Å–æ–∑–¥–∞—é—â–∏–π –∫–∞—Ä—Ç–∏–Ω—É –≤ —Å—Ç–∏–ª–µ –ú–æ–Ω–µ',
                                '–ª–µ—Å –∏–∑ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –ø–æ–¥ –ª—É–Ω–æ–π',
                                '–ø–∏—Ä–∞—Ç—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –ø–ª—ã–≤—É—â–∏–π –ø–æ –æ–±–ª–∞–∫–∞–º',
                                '–≥–æ—Ä–æ–¥ —ç–ª—å—Ñ–æ–≤ –≤ –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö —Ü–≤–µ—Ç–∞—Ö',
                                '–∞–Ω–¥—Ä–æ–∏–¥ –º–µ—á—Ç–∞—é—â–∏–π –æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏',
                                '–ø–æ—Ä—Ç–∞–ª –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ'
                            ];

                            form.addEventListener('submit', async (e) => {
                                e.preventDefault();

                                const formData = new FormData(form);
                                const data = {
                                    prompt: formData.get('prompt'),
                                    style: formData.get('style'),
                                    width: parseInt(formData.get('width')),
                                    height: parseInt(formData.get('height')),
                                    negativePrompt: formData.get('negativePrompt') || ''
                                };

                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                                result.style.display = 'block';
                                loading.style.display = 'block';
                                success.style.display = 'none';
                                error.style.display = 'none';

                                try {
                                    const response = await fetch('/api/generate-image', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(data)
                                    });

                                    const resultData = await response.json();

                                    loading.style.display = 'none';

                                    if (resultData.success) {
                                        success.style.display = 'block';
                                        document.getElementById('successMessage').textContent = resultData.message;

                                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ)
                                        if (resultData.imageUrl) {
                                            generatedImage.src = resultData.imageUrl;
                                            generatedImage.style.display = 'block';
                                        }
                                    } else {
                                        error.style.display = 'block';
                                        document.getElementById('errorMessage').textContent = resultData.error || resultData.message;
                                    }
                                } catch (err) {
                                    loading.style.display = 'none';
                                    error.style.display = 'block';
                                    document.getElementById('errorMessage').textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message;
                                }
                            });

                            function setPrompt(prompt) {
                                document.getElementById('prompt').value = prompt;
                            }

                            function generateRandom() {
                                const randomPrompt = randomPrompts[Math.floor(Math.random() * randomPrompts.length)];
                                setPrompt(randomPrompt);
                            }
                        </script>
                    </body>
                    </html>
                    """.trimIndent(),
                    ContentType.Text.Html
                )
            }

            // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            get("/") {
                call.respondText(
                    """
                    üé® Kandinsky Image Generation Server

                    –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
                    ‚Ä¢ POST /api/generate-image - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Kandinsky
                    ‚Ä¢ GET /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
                    ‚Ä¢ GET /generate - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    ‚Ä¢ GET /images/{filename} - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

                    –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
                    curl -X POST http://your-server:8080/api/generate-image \
                         -H "Content-Type: application/json" \
                         -d '{"prompt": "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏", "style": "DEFAULT", "width": 1024, "height": 1024}'

                    –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://your-server:8080/generate

                    """.trimIndent(),
                    ContentType.Text.Plain
                )
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
            get("/api/health") {
                val responseJson = """
                    {
                        "status": "healthy",
                        "timestamp": ${System.currentTimeMillis()},
                        "version": "1.0.0"
                    }
                """.trimIndent()
                call.respondText(responseJson, ContentType.Application.Json)
            }

            // –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            get("/images") {
                val imageFiles = imagesDir.listFiles { file ->
                    file.isFile && file.name.startsWith("kandinsky_") &&
                    (file.name.endsWith(".png") || file.name.endsWith(".jpg") || file.name.endsWith(".jpeg"))
                }?.map { it.name } ?: emptyList()

                val html = """
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</title>
                        <style>
                            body { font-family: Arial, sans-serif; margin: 20px; }
                            .image-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px; }
                            .image-item { border: 1px solid #ddd; padding: 10px; text-align: center; }
                            img { max-width: 100%; height: 150px; object-fit: cover; }
                        </style>
                    </head>
                    <body>
                        <h1>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${imageFiles.size})</h1>
                        <div class="image-grid">
                            ${imageFiles.joinToString("") { filename ->
                                """
                                <div class="image-item">
                                    <img src="/image/$filename" alt="$filename" onerror="this.style.display='none'">
                                    <p>$filename</p>
                                </div>
                                """
                            }}
                        </div>
                        ${if (imageFiles.isEmpty()) "<p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>" else ""}
                    </body>
                    </html>
                """.trimIndent()

                call.respondText(html, ContentType.Text.Html)
            }

            // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç)
            get("/image/{filename}") {
                val filename = call.parameters["filename"]
                println("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: $filename")
                println("üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imagesDir.absolutePath}")

                if (filename != null) {
                    val imageFile = File(imagesDir, filename)
                    println("üîç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${imageFile.absolutePath}")
                    println("üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${imageFile.exists()}")
                    println("üìÑ –≠—Ç–æ —Ñ–∞–π–ª: ${imageFile.isFile}")

                    if (imageFile.exists() && imageFile.isFile) {
                        val contentType = when (filename.substringAfterLast(".")) {
                            "png" -> ContentType.Image.PNG
                            "jpg", "jpeg" -> ContentType.Image.JPEG
                            "gif" -> ContentType.Image.GIF
                            else -> ContentType.Application.OctetStream
                        }
                        val fileBytes = imageFile.readBytes()
                        println("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileBytes.size} –±–∞–π—Ç")
                        call.respondBytes(fileBytes, contentType)
                    } else {
                        println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º")
                        call.respondText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", status = HttpStatusCode.NotFound)
                    }
                } else {
                    println("‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
                    call.respondText("–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ", status = HttpStatusCode.BadRequest)
                }
            }

            // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            get("/test") {
                call.respondText("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", ContentType.Text.Plain)
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Kandinsky
            post("/api/generate-image") {
                try {
                    println("üé® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                    val requestText = call.receiveText()
                    val request = json.decodeFromString<ImageGenerationRequest>(requestText)
                    println("üìù –ü—Ä–æ–º–ø—Ç: ${request.prompt}")
                    println("üé≠ –°—Ç–∏–ª—å: ${request.style}")
                    println("üìê –†–∞–∑–º–µ—Ä: ${request.width}x${request.height}")

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    val timestamp = System.currentTimeMillis()
                    val randomId = (0..999999999).random()
                    val fileName = "kandinsky_${timestamp}_${randomId}.png"
                    val fullPath = imagesDir.absolutePath + File.separator + fileName

                    println("üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤: $fullPath")

                    // –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kandinsky API
                    println("üîó –í—ã–∑—ã–≤–∞–µ–º Kandinsky API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

                    try {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π Kotlin —Ñ—É–Ω–∫—Ü–∏–∏
                        val kandinskyResult = runBlocking {
                            generateImageWithKandinsky(request.prompt, request.style, request.width, request.height)
                        }

                        if (kandinskyResult != null) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
                            val imageFile = File(fullPath)
                            imageFile.writeBytes(kandinskyResult)
                            println("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${imageFile.absolutePath}")
                            println("üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${kandinskyResult.size} –±–∞–π—Ç")
                        } else {
                            throw Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Kandinsky API")
                        }

                    } catch (e: Exception) {
                        println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Kandinsky API: ${e.message}")
                        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                        val imageFile = File(fullPath)
                        val errorImage = createPlaceholderImage("Error: ${e.message}", request.width, request.height)
                        if (errorImage != null) {
                            imageFile.writeBytes(errorImage)
                            println("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏: ${imageFile.absolutePath}")
                        } else {
                            val errorMessage = "Error generating image: ${e.message}".toByteArray()
                            imageFile.writeBytes(errorMessage)
                        }
                    }

                    val imageUrl = "/image/$fileName"

                    val responseJson = """
                        {
                            "success": true,
                            "message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ",
                            "imageUrl": "$imageUrl",
                            "fileName": "$fileName"
                        }
                    """.trimIndent()
                    call.respondText(responseJson, ContentType.Application.Json)
                    println("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $imageUrl")

                } catch (e: Exception) {
                    println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}")
                    e.printStackTrace()

                    val responseJson = """
                        {
                            "success": false,
                            "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                            "error": "${e.message?.replace("\"", "\\\"") ?: "Unknown error"}"
                        }
                    """.trimIndent()
                    call.respondText(responseJson, ContentType.Application.Json, HttpStatusCode.BadRequest)
                }
            }
        }
    }.start(wait = true)
}


