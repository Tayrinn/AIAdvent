package com.tayrinn.aiadvent.util

import java.io.File
import java.io.FileInputStream
import java.util.Properties

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
 */
class ConfigService {
    
    private val properties = Properties()
    private var isLoaded = false
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
     */
    fun loadConfig(configPath: String = "config.properties") {
        try {
            println("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $configPath")
            println("üìÅ –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${File(".").absolutePath}")
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            var configFile = File(configPath)
            println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${configFile.absolutePath}")
            println("   –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${configFile.exists()}")
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            if (!configFile.exists()) {
                println("üîç –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞...")
                val projectRoot = findProjectRoot()
                if (projectRoot != null) {
                    configFile = File(projectRoot, configPath)
                    println("üîç –ù–∞–π–¥–µ–Ω –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: $projectRoot")
                    println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${configFile.absolutePath}")
                    println("   –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${configFile.exists()}")
                } else {
                    println("‚ùå –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                }
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
            if (!configFile.exists()) {
                val absolutePath = "/Users/tayrinn/AndroidStudioProjects/AIAdvent/config.properties"
                configFile = File(absolutePath)
                println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: ${configFile.absolutePath}")
                println("   –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${configFile.exists()}")
            }
            
            if (configFile.exists()) {
                FileInputStream(configFile).use { input ->
                    properties.load(input)
                }
                isLoaded = true
                println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: ${configFile.absolutePath}")
                println("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏: ${properties.stringPropertyNames()}")
            } else {
                println("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $configPath")
                loadDefaultConfig()
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${e.message}")
            e.printStackTrace()
            loadDefaultConfig()
        }
    }
    
    /**
     * –ò—â–µ—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
     */
    private fun findProjectRoot(): String? {
        var currentDir = File(".").absolutePath
        val maxDepth = 10 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞
        
        println("üîç –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å: $currentDir")
        
        repeat(maxDepth) {
            val configFile = File(currentDir, "config.properties")
            println("   –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${configFile.absolutePath} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${configFile.exists()})")
            
            if (configFile.exists()) {
                println("‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤: $currentDir")
                return currentDir
            }
            
            val parentDir = File(currentDir).parentFile
            if (parentDir == null || !parentDir.exists()) {
                println("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ—Ä–µ–Ω—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
                return null
            }
            currentDir = parentDir.absolutePath
        }
        
        println("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞")
        return null
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private fun loadDefaultConfig() {
        // Hugging Face API configuration
        properties.setProperty("huggingface.api.key", "")
        properties.setProperty("huggingface.api.model", "deepseek-ai/DeepSeek-V3-0324")
        properties.setProperty("huggingface.api.max_tokens", "2000")
        properties.setProperty("huggingface.api.temperature", "0.7")

        // Legacy OpenAI configuration
        properties.setProperty("openai.api.key", "")
        properties.setProperty("openai.api.model", "gpt-5")
        properties.setProperty("openai.api.max_tokens", "2000")
        properties.setProperty("openai.api.temperature", "0.7")

        println("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        println("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    fun getProperty(key: String, defaultValue: String = ""): String {
        if (!isLoaded) {
            loadConfig()
        }
        val value = properties.getProperty(key, defaultValue)
        println("üîë –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á '$key': ${if (key.contains("key")) "***" else value}")
        return value
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∫ Int
     */
    fun getIntProperty(key: String, defaultValue: Int): Int {
        return getProperty(key, defaultValue.toString()).toIntOrNull() ?: defaultValue
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∫ Double
     */
    fun getDoubleProperty(key: String, defaultValue: Double): Double {
        return getProperty(key, defaultValue.toString()).toDoubleOrNull() ?: defaultValue
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
     */
    fun isConfigLoaded(): Boolean = isLoaded
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    fun getAvailableKeys(): Set<String> = properties.stringPropertyNames()

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç Hugging Face API –∫–ª—é—á
     */
    fun getHuggingFaceApiKey(): String = getProperty("huggingface.api.key", "")
}
