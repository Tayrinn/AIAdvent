package com.tayrinn.aiadvent.data.api

import com.tayrinn.aiadvent.data.model.*
import com.tayrinn.aiadvent.util.ConfigService

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.time.Duration
import java.net.URL
import java.net.HttpURLConnection

/**
 * –ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—Ä–æ—Å–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∑–∞–¥–∞—á–µ–π
 */
class AIModelFailureException(message: String) : Exception(message)

class OpenAIApiImplInternal : OpenAIApi {

    private val httpClient = java.net.http.HttpClient.newBuilder()
        .connectTimeout(java.time.Duration.ofSeconds(30))
        .build()
    private val json = Json {
        ignoreUnknownKeys = true
        prettyPrint = true
        encodeDefaults = true  // –í–∞–∂–Ω–æ! –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hugging Face API
    private val configService = ConfigService
    private var apiKey: String = ""
    private var defaultModel: String = "deepseek-ai/DeepSeek-V3-0324"
    private var maxTokens: Int = 2000
    private var temperature: Double = 0.7


    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞
    init {
        configService.loadConfig()
        apiKey = configService.getProperty("huggingface.api.key")
        defaultModel = configService.getProperty("huggingface.api.model", "deepseek-ai/DeepSeek-V3-0324")
        maxTokens = configService.getIntProperty("huggingface.api.max_tokens", 2000)
        temperature = configService.getDoubleProperty("huggingface.api.temperature", 0.7)


        println("üîë Hugging Face API Key format check:")
        println("   Length: ${apiKey.length}")
        println("   Starts with: ${apiKey.take(7)}")
        println("   Contains 'hf_': ${apiKey.contains("hf_")}")

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        println("üß™ Testing serialization:")
        val testRequest = HuggingFaceRequest(
            model = defaultModel,
            messages = listOf(HuggingFaceMessage("user", "test"))
        )
        val testJson = json.encodeToString(testRequest)
        println("   Test JSON: $testJson")
    }
    private val baseUrl = "https://router.huggingface.co"
    
        override suspend fun chatCompletion(request: OpenAIRequest): OpenAIResponse = withContext(Dispatchers.IO) {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OpenAI –∑–∞–ø—Ä–æ—Å –≤ Hugging Face —Ñ–æ—Ä–º–∞—Ç
            val hfMessages = request.messages.map { message ->
                HuggingFaceMessage(
                    role = message.role,
                    content = message.content
                )
            }

            val hfRequest = HuggingFaceRequest(
                model = request.model.ifEmpty { defaultModel },
                messages = hfMessages
            )

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            println("üîç Hugging Face Request Object:")
            println("   Model: ${hfRequest.model}")
            println("   Messages count: ${hfRequest.messages.size}")

            val requestBody = json.encodeToString(hfRequest)

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
            val requestSize = requestBody.length
            println("üìè –†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: $requestSize —Å–∏–º–≤–æ–ª–æ–≤")
            if (requestSize > 10000) {
                println("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (>10KB), —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
            }

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            println("üîç Hugging Face API Request:")
            println("   URL: $baseUrl/v1/chat/completions")
            println("   Headers: Content-Type=application/json, Authorization=Bearer ${apiKey.take(10)}...")
            println("   Request Body: $requestBody")

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º HttpURLConnection
            println("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º HttpURLConnection...")

            val url = URL("$baseUrl/v1/chat/completions")
            val connection = url.openConnection() as HttpURLConnection
            connection.requestMethod = "POST"
            connection.setRequestProperty("Content-Type", "application/json")
            connection.setRequestProperty("Authorization", "Bearer $apiKey")
            connection.setRequestProperty("User-Agent", "AIAdvent/1.0")
            connection.setRequestProperty("Accept", "application/json")
            connection.connectTimeout = 30000
            connection.readTimeout = 120000
            connection.doOutput = true

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            connection.outputStream.use { os ->
                os.write(requestBody.toByteArray())
                os.flush()
            }

            val responseCode = connection.responseCode
            println("üîç Hugging Face API Response:")
            println("   Status Code: $responseCode")

            if (responseCode == 200) {
                val responseBody = connection.inputStream.bufferedReader().use { it.readText() }
                println("   Response Body: $responseBody")

                try {
                    val hfResult = json.decodeFromString<HuggingFaceResponse>(responseBody)

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Hugging Face –æ—Ç–≤–µ—Ç –≤ OpenAI —Ñ–æ—Ä–º–∞—Ç
                    val result = OpenAIResponse(
                        id = hfResult.id,
                        `object` = hfResult.`object`,
                        created = hfResult.created,
                        model = hfResult.model,
                        choices = hfResult.choices.map { choice ->
                            OpenAIChoice(
                                index = choice.index,
                                message = OpenAIMessage(
                                    role = choice.message.role,
                                    content = choice.message.content
                                ),
                                finishReason = choice.finishReason
                            )
                        },
                        usage = hfResult.usage?.let { usage ->
                            OpenAIUsage(
                                promptTokens = usage.promptTokens,
                                completionTokens = usage.completionTokens,
                                totalTokens = usage.totalTokens
                            )
                        }
                    )

                    println("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ content –Ω–µ –ø—É—Å—Ç–æ–π
                    val content = result.choices.firstOrNull()?.message?.content
                    println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º content –≤ chatCompletion: length=${content?.length ?: 0}, isNullOrBlank=${content.isNullOrBlank()}")
                    if (content.isNullOrBlank()) {
                        println("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π content –≤ –æ—Ç–≤–µ—Ç–µ Hugging Face API!")
                        throw AIModelFailureException("–ú–æ–¥–µ–ª—å AI –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∑–∞–¥–∞—á–µ–π.")
                    }

                    result
                } catch (e: Exception) {
                    println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Hugging Face API: ${e.message}")
                    throw AIModelFailureException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face API: ${e.message}")
                }
            } else {
                val errorBody = connection.errorStream?.bufferedReader()?.use { it.readText() } ?: "Unknown error"
                println("‚ùå Hugging Face API Error ($responseCode): $errorBody")

                OpenAIResponse(
                    id = "error",
                    `object` = "chat.completion",
                    created = System.currentTimeMillis() / 1000,
                    model = request.model,
                    choices = listOf(
                        OpenAIChoice(
                            index = 0,
                            message = OpenAIMessage(
                                role = "assistant",
                                content = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Hugging Face API. –ö–æ–¥ –æ—à–∏–±–∫–∏: $responseCode"
                            ),
                            finishReason = "error"
                        )
                    )
                )
            }
        } catch (e: Exception) {
            println("‚ùå Exception calling Hugging Face API: ${e.message}")
            println("‚ùå Exception type: ${e.javaClass.simpleName}")
            e.printStackTrace()

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
            when (e) {
                is java.net.ConnectException -> {
                    println("üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É")
                    println("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    println("   –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –∫ router.huggingface.co")
                }
                is java.net.SocketTimeoutException -> {
                    println("‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    println("   –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç")
                    println("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                }
                is java.io.IOException -> {
                    if (e.message?.contains("Connection reset") == true) {
                        println("üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                        println("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        println("   - –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                        println("   - Firewall/Proxy –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                        println("   - –°–µ—Ä–≤–µ—Ä Hugging Face –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
                        println("   - –ü—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º")
                    } else {
                        println("üì° –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞: ${e.message}")
                    }
                }
                else -> {
                    println("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${e.javaClass.simpleName}")
                }
            }

            // Return error response
            OpenAIResponse(
                id = "error",
                `object` = "chat.completion",
                created = System.currentTimeMillis() / 1000,
                model = request.model,
                choices = listOf(
                    OpenAIChoice(
                        index = 0,
                        message = OpenAIMessage(
                            role = "assistant",
                            content = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Hugging Face: ${e.message}"
                        ),
                        finishReason = "error"
                    )
                )
            )
        }
    }
    
        override suspend fun sendMessage(
        message: String,
        recentMessages: List<ChatMessage>,
        modelName: String?
    ): Pair<String, String> = withContext(Dispatchers.IO) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            val messages = mutableListOf<OpenAIMessage>()

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.add(OpenAIMessage(
                role = "system",
                content = "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
            ))

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 3)
            val contextMessages = recentMessages.takeLast(3)
            contextMessages.forEach { chatMessage ->
                if (chatMessage.isUser) {
                    messages.add(OpenAIMessage(role = "user", content = chatMessage.content))
                } else if (!chatMessage.isError && !chatMessage.isTestReport) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ AI (—É–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
                    val aiContent = chatMessage.content
                        .replace(Regex("""ü§ñ \*\*.*?:\*\* """), "") // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI
                        .replace(Regex("""üå°Ô∏è [\d.]+.*?:\*\* """), "") // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                    messages.add(OpenAIMessage(role = "assistant", content = aiContent))
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.add(OpenAIMessage(role = "user", content = message))
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face
            val request = OpenAIRequest(
                model = modelName ?: defaultModel,
                messages = messages,
                maxCompletionTokens = maxTokens
            )
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            println("üîç Hugging Face Request Details:")
            println("   Model: ${request.model}")
            println("   Messages count: ${request.messages.size}")
            
            val response = chatCompletion(request)

            val assistantResponse = response.choices.firstOrNull()?.message?.content

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI: length=${assistantResponse?.length ?: 0}, isNullOrBlank=${assistantResponse.isNullOrBlank()}")
            if (assistantResponse.isNullOrBlank()) {
                println("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI –º–æ–¥–µ–ª–∏!")
                throw AIModelFailureException("–ú–æ–¥–µ–ª—å AI –Ω–µ —Å–º–æ–≥–ª–∞ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∑–∞–¥–∞—á–µ–π –∏ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞.")
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
            Pair(assistantResponse, "")
            
        } catch (e: Exception) {
            println("Error in sendMessage: ${e.message}")
            e.printStackTrace()
            Pair(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: ${e.message}",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ API –∫–ª—é—á"
            )
        }
    }
}
