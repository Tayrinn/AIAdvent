package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.api.createOpenAIApiImpl
import com.tayrinn.aiadvent.data.model.ChatMessage
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.decodeFromString
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import java.io.File
import java.nio.file.Files
import java.nio.file.Paths
import kotlin.streams.toList

data class ProjectStructure(
    val rootPath: String,
    val files: List<ProjectFile>,
    val totalFiles: Int,
    val totalLines: Int,
    val languages: Map<String, Int> // —è–∑—ã–∫ -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
)

data class ProjectFile(
    val relativePath: String,
    val absolutePath: String,
    val size: Long,
    val extension: String,
    val language: String,
    val lines: Int = 0
)

data class ReviewSession(
    val projectStructure: ProjectStructure,
    val currentStage: ReviewStage,
    val reviewedFiles: MutableSet<String> = mutableSetOf(),
    val findings: MutableList<ReviewFinding> = mutableListOf()
)

enum class ReviewStage {
    INITIAL_ANALYSIS,    // –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    DETAILED_REVIEW,     // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
    FINAL_RECOMMENDATIONS // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
}

data class ReviewFinding(
    val type: FindingType,
    val file: String,
    val description: String,
    val recommendation: String,
    val severity: Severity
)

enum class FindingType {
    CODE_DUPLICATION,
    PERFORMANCE_ISSUE,
    SECURITY_ISSUE,
    READABILITY,
    OUTDATED_DEPENDENCY,
    ARCHITECTURE,
    BEST_PRACTICES
}

enum class Severity {
    LOW, MEDIUM, HIGH, CRITICAL
}

class ProjectReviewService {
    
    private val openAIApi = createOpenAIApiImpl()
    private val json = Json { ignoreUnknownKeys = true }
    private var currentSession: ReviewSession? = null
    private val httpClient by lazy { OkHttpClient() }
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    private val supportedExtensions = setOf(
        "kt", "java", "js", "ts", "py", "cpp", "c", "h", "cs", "go", "rs",
        "swift", "php", "rb", "scala", "clj", "hs", "ml", "r", "sql",
        "html", "css", "scss", "less", "xml", "json", "yaml", "yml",
        "gradle", "pom", "package", "requirements", "Dockerfile", "Makefile"
    )
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
     */
    suspend fun analyzeProject(projectPath: String): ProjectStructure = withContext(Dispatchers.IO) {
        try {
            val rootDir = File(projectPath)
            if (!rootDir.exists() || !rootDir.isDirectory) {
                throw IllegalArgumentException("–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É")
            }

            println("üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: $projectPath")
            println("üîé –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")

            val files = mutableListOf<ProjectFile>()
            val languages = mutableMapOf<String, Int>()
            var totalLines = 0
            var scannedEntries = 0
            val maxEntriesToScan = 20000 // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö –ø—É—Ç–µ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ –æ–≥—Ä–æ–º–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, venv)

            Files.walk(Paths.get(projectPath))
                .limit(maxEntriesToScan.toLong())
                .filter { Files.isRegularFile(it) }
                .filter { !isIgnoredPath(it.toString()) }
                .toList()
                .forEach { path ->
                    val file = path.toFile()
                    val extension = file.extension.lowercase()

                    if (supportedExtensions.contains(extension) || file.name.lowercase() in supportedExtensions) {
                        scannedEntries++
                        if (scannedEntries % 500 == 0) {
                            println("‚è≥ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: $scannedEntries...")
                        }

                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (> 2 –ú–ë)
                        val fileSizeBytes = file.length()
                        if (fileSizeBytes > 2 * 1024 * 1024) {
                            return@forEach
                        }

                        val language = detectLanguage(extension, file.name)
                        val lines = countLines(file)

                        files.add(
                            ProjectFile(
                                relativePath = rootDir.toPath().relativize(path).toString(),
                                absolutePath = path.toString(),
                                size = file.length(),
                                extension = extension,
                                language = language,
                                lines = lines
                            )
                        )

                        languages[language] = languages.getOrDefault(language, 0) + 1
                        totalLines += lines
                    }
                }

            ProjectStructure(
                rootPath = projectPath,
                files = files.sortedBy { it.relativePath },
                totalFiles = files.size,
                totalLines = totalLines,
                languages = languages
            )
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ (analyzeProject): ${e.message}")
            e.printStackTrace()
            throw e
        }
    }
    
    @Serializable
    data class ReviewDecision(
        val advice: String,
        val next_command: String? = null
    )

    /**
     * –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ò–ò —Å–æ–≤–µ—Ç—ã –∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
     */
    suspend fun decideNextAction(previousResult: String): ReviewDecision? {
        val session = currentSession ?: return null
        val structure = session.projectStructure

        val prompt = """
–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ —Å—Ç—Ä–æ–≥–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–≤—å—é–≤–µ—Ä–∞ –∫–æ–¥–∞. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
–ü—É—Ç—å: ${structure.rootPath}
–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${structure.totalFiles}
–Ø–∑—ã–∫–∏: ${structure.languages.entries.joinToString(", ") { it.key + ": " + it.value }}

–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–ï–î–´–î–£–©–ï–ô –ö–û–ú–ê–ù–î–´:
"""
            .trimIndent() + "\n\n" + previousResult + "\n\n" +
            """
–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1) –î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º (–¥–æ 10 –ø—É–Ω–∫—Ç–æ–≤, –ø–æ –¥–µ–ª—É)
2) –í—ã–±–µ—Ä–∏ –°–õ–ï–î–£–Æ–©–£–Æ –ö–û–ú–ê–ù–î–£ –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä–æ–≥–æ –æ–¥–Ω—É):
   - "show file: <–ø—É—Ç—å>"
   - "list files: <–ø–∞—Ç—Ç–µ—Ä–Ω>"
   - "analyze dependencies"
   - "find duplicates"
   - "check architecture"
   - "final report"

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ Markdown.
{
  "advice": "–∫—Ä–∞—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã...",
  "next_command": "show file: src/..." | "analyze dependencies" | "find duplicates" | "check architecture" | "list files: .kt" | "final report" | null
}
""".trimIndent()

        val response = chatWithPreferredProvider(prompt)

        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —á–∏—Å—Ç—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–∏–ª–∞ —Ç–µ–∫—Å—Ç)
        val jsonRegex = Regex("\\{[\\s\\S]*?\\}")
        val jsonStr = jsonRegex.find(response)?.value ?: response
        return try {
            json.decodeFromString<ReviewDecision>(jsonStr)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ReviewDecision JSON: ${e.message}")
            null
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ OpenAI (env.local), –∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
     */
    private suspend fun generateInitialAnalysis(structure: ProjectStructure): String {
        val prompt = """
–¢—ã - –ò–ò-—Ä–µ–≤—å—é–≤–µ—Ä –∫–æ–¥–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ü–û–®–ê–ì–û–í–û, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã.

–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:
–ü—É—Ç—å: ${structure.rootPath}
–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${structure.totalFiles}
–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${structure.totalLines}

–Ø–ó–´–ö–ò –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø:
${structure.languages.entries.joinToString("\n") { "- ${it.key}: ${it.value} —Ñ–∞–π–ª–æ–≤" }}

–§–ê–ô–õ–´ (–ø–µ—Ä–≤—ã–µ 50):
${structure.files.take(50).joinToString("\n") { "- ${it.relativePath} (${it.lines} —Å—Ç—Ä–æ–∫, ${it.language})" }}

–í–ê–ñ–ù–û: –ù–ï –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–µ–∫—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:
- "show file: <–ø—É—Ç—å>" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
- "list files: <—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ>" - –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞  
- "analyze dependencies" - –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- "find duplicates" - –ø–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
- "check architecture" - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- "final report" - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç

–ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–´:
1. –°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: "analyze dependencies"
2. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã: "show file: <–ø—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–º—É —Ñ–∞–π–ª—É>"
3. –ù–∞–π–¥–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã: "find duplicates"
4. –ü—Ä–æ–≤–µ—Ä—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: "check architecture"
5. –°–¥–µ–ª–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: "final report"

–ù–∞—á–Ω–∏ –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –ü–∏—à–∏ –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
        """.trimIndent()

        return chatWithPreferredProvider(prompt)
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Ç-–∑–∞–ø—Ä–æ—Å: –µ—Å–ª–∏ –≤ env.local –Ω–∞—Å—Ç—Ä–æ–µ–Ω OpenAI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ; –∏–Ω–∞—á–µ fallback –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
     */
    private suspend fun chatWithPreferredProvider(userPrompt: String): String {
        val cfg = loadOpenAIConfig()
        return if (cfg != null) {
            val (apiKey, model) = cfg
            chatOpenAI(userPrompt, apiKey, model)
        } else {
            // fallback –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É API
            val (resp, _) = openAIApi.sendMessage(userPrompt, emptyList(), null)
            println("ü§ñ AI response (fallback provider):\n$resp")
            resp
        }
    }

    // ===== OpenAI ChatGPT (env.local) =====

    @Serializable
    private data class OpenAIMessage(val role: String, val content: String)
    @Serializable
    private data class OpenAIChatRequest(val model: String, val messages: List<OpenAIMessage>, val temperature: Double = 0.3)
    @Serializable
    private data class OpenAIChoice(val index: Int, val message: OpenAIMessage)
    @Serializable
    private data class OpenAIChatResponse(val choices: List<OpenAIChoice>)

    private fun loadOpenAIConfig(): Pair<String, String>? {
        // –ò—â–µ–º env.local –≤ —Ç–µ–∫—É—â–µ–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–∞–ª–æ–≥–∞—Ö (–¥–æ 3 —É—Ä–æ–≤–Ω–µ–π)
        val candidates = listOf(
            "env.local",
            "../env.local",
            "../../env.local",
            "../../../env.local"
        )
        val file = candidates.map { java.io.File(it) }.firstOrNull { it.exists() && it.isFile }
        if (file == null) return null
        val lines = file.readLines()
        val map = lines.mapNotNull { line ->
            val trimmed = line.trim()
            if (trimmed.isEmpty() || trimmed.startsWith("#")) null
            else {
                val idx = trimmed.indexOf('=')
                if (idx > 0) trimmed.substring(0, idx).trim() to trimmed.substring(idx + 1).trim() else null
            }
        }.toMap()
        val apiKey = map["OPENAI_API_KEY"] ?: map["OPENAI.KEY"]
        val model = map["OPENAI_MODEL"] ?: map["OPENAI.MODEL"] ?: "gpt-4o-mini"
        return if (!apiKey.isNullOrBlank()) apiKey to model else null
    }

    private suspend fun chatOpenAI(userPrompt: String, apiKey: String, model: String): String = withContext(Dispatchers.IO) {
        val url = "https://api.openai.com/v1/chat/completions"
        val systemMsg = OpenAIMessage(role = "system", content = "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ –ø–æ –¥–µ–ª—É.")
        val userMsg = OpenAIMessage(role = "user", content = userPrompt)
        val reqObj = OpenAIChatRequest(model = model, messages = listOf(systemMsg, userMsg))
        val bodyStr = json.encodeToString(OpenAIChatRequest.serializer(), reqObj)
        val requestBody: RequestBody = bodyStr.toRequestBody("application/json".toMediaType())
        val request = Request.Builder()
            .url(url)
            .addHeader("Authorization", "Bearer $apiKey")
            .addHeader("Content-Type", "application/json")
            .post(requestBody)
            .build()
        httpClient.newCall(request).execute().use { resp ->
            val text = resp.body?.string() ?: ""
            if (!resp.isSuccessful) {
                println("‚ùå OpenAI API Error (${resp.code}): $text")
                return@withContext "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API. –ö–æ–¥ –æ—à–∏–±–∫–∏: ${resp.code}"
            }
            val parsed = json.decodeFromString(OpenAIChatResponse.serializer(), text)
            val content = parsed.choices.firstOrNull()?.message?.content ?: ""
            println("ü§ñ OpenAI response:\n$content")
            return@withContext content
        }
    }

    /**
     * –ù–∞—á–∏–Ω–∞–µ—Ç —Å–µ—Å—Å–∏—é —Ä–µ–≤—å—é –ø—Ä–æ–µ–∫—Ç–∞
     */
    suspend fun startReviewSession(projectStructure: ProjectStructure): String {
        currentSession = ReviewSession(
            projectStructure = projectStructure,
            currentStage = ReviewStage.INITIAL_ANALYSIS
        )
        
        return generateInitialAnalysis(projectStructure)
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò
     */
    fun extractCommandFromResponse(response: String): String? {
        val supportedCommands = listOf(
            "show file:",
            "list files:",
            "analyze dependencies",
            "find duplicates", 
            "check architecture",
            "final report"
        )
        
        // –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        response.lines().forEach { line ->
            val trimmedLine = line.trim()
            supportedCommands.forEach { command ->
                if (trimmedLine.startsWith(command, ignoreCase = true)) {
                    return trimmedLine
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
        supportedCommands.forEach { command ->
            if (response.contains(command, ignoreCase = true)) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π
                val lines = response.split('\n')
                val commandLine = lines.find { it.contains(command, ignoreCase = true) }
                if (commandLine != null) {
                    return commandLine.trim()
                }
            }
        }
        
        return null
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ò–ò
     */
    suspend fun processCommand(command: String): String = withContext(Dispatchers.IO) {
        val session = currentSession ?: return@withContext "‚ùå –°–µ—Å—Å–∏—è —Ä–µ–≤—å—é –Ω–µ –Ω–∞—á–∞—Ç–∞"
        
        println("üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É: '$command'")
        
        return@withContext when {
            command.startsWith("show file:", ignoreCase = true) -> {
                val filePath = command.substringAfter("show file:").trim()
                showFileContent(filePath)
            }
            command.startsWith("list files:", ignoreCase = true) -> {
                val pattern = command.substringAfter("list files:").trim()
                listFiles(pattern)
            }
            command.startsWith("analyze dependencies", ignoreCase = true) -> {
                analyzeDependencies()
            }
            command.startsWith("find duplicates", ignoreCase = true) -> {
                findCodeDuplicates()
            }
            command.startsWith("check architecture", ignoreCase = true) -> {
                checkArchitecture()
            }
            command.startsWith("final report", ignoreCase = true) -> {
                generateFinalReport()
            }
            else -> {
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "- show file: <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>\n" +
                "- list files: <–ø–∞—Ç—Ç–µ—Ä–Ω –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ>\n" +
                "- analyze dependencies\n" +
                "- find duplicates\n" +
                "- check architecture\n" +
                "- final report"
            }
        }
    }
    
    // (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤—ã—à–µ –∫–∞–∫ chatWithPreferredProvider)
    
    private fun showFileContent(filePath: String): String {
        val session = currentSession ?: return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        // –ò—â–µ–º —Ñ–∞–π–ª –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
        val projectFile = session.projectStructure.files.find { 
            it.relativePath.equals(filePath, ignoreCase = true) || 
            it.relativePath.endsWith(filePath, ignoreCase = true)
        }
        
        if (projectFile == null) {
            val suggestions = session.projectStructure.files
                .filter { it.relativePath.contains(filePath, ignoreCase = true) }
                .take(5)
                .joinToString("\n") { "- ${it.relativePath}" }
            
            return "‚ùå –§–∞–π–ª '$filePath' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" +
                if (suggestions.isNotEmpty()) "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n$suggestions" else ""
        }
        
        return try {
            val file = File(projectFile.absolutePath)
            val content = file.readText()
            
            session.reviewedFiles.add(projectFile.relativePath)
            
            "üìÑ **${projectFile.relativePath}** (${projectFile.lines} —Å—Ç—Ä–æ–∫, ${projectFile.language})\n\n" +
            "```${projectFile.language.lowercase()}\n$content\n```"
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${e.message}"
        }
    }
    
    private fun listFiles(pattern: String): String {
        val session = currentSession ?: return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        val filteredFiles = when {
            pattern.startsWith(".") -> {
                // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                session.projectStructure.files.filter { it.extension.equals(pattern.drop(1), ignoreCase = true) }
            }
            else -> {
                // –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤ –ø—É—Ç–∏
                session.projectStructure.files.filter { it.relativePath.contains(pattern, ignoreCase = true) }
            }
        }
        
        if (filteredFiles.isEmpty()) {
            return "‚ùå –§–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '$pattern' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        }
        
        val grouped = filteredFiles.groupBy { it.language }
        
        return buildString {
            appendLine("üìã **–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filteredFiles.size}**")
            appendLine()
            
            grouped.forEach { (language, files) ->
                appendLine("**$language (${files.size} —Ñ–∞–π–ª–æ–≤):**")
                files.take(20).forEach { file ->
                    appendLine("- ${file.relativePath} (${file.lines} —Å—Ç—Ä–æ–∫)")
                }
                if (files.size > 20) {
                    appendLine("... –∏ –µ—â—ë ${files.size - 20} —Ñ–∞–π–ª–æ–≤")
                }
                appendLine()
            }
        }
    }
    
    private fun analyzeDependencies(): String {
        val session = currentSession ?: return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        val dependencyFiles = session.projectStructure.files.filter { file ->
            file.relativePath.lowercase().let { path ->
                path.endsWith("package.json") ||
                path.endsWith("build.gradle") ||
                path.endsWith("build.gradle.kts") ||
                path.endsWith("pom.xml") ||
                path.endsWith("requirements.txt") ||
                path.endsWith("composer.json") ||
                path.endsWith("cargo.toml") ||
                path.endsWith("go.mod")
            }
        }
        
        if (dependencyFiles.isEmpty()) {
            return "‚ùå –§–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        }
        
        return buildString {
            appendLine("üì¶ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:**")
            appendLine()
            
            dependencyFiles.forEach { file ->
                try {
                    val content = File(file.absolutePath).readText()
                    appendLine("**${file.relativePath}:**")
                    appendLine("```")
                    appendLine(content.take(1000) + if (content.length > 1000) "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)" else "")
                    appendLine("```")
                    appendLine()
                } catch (e: Exception) {
                    appendLine("**${file.relativePath}:** ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
                }
            }
        }
    }
    
    private fun findCodeDuplicates(): String {
        val session = currentSession ?: return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
        val codeFiles = session.projectStructure.files.filter { 
            it.language in setOf("Kotlin", "Java", "JavaScript", "TypeScript", "Python", "C++", "C#")
        }
        
        val suspiciousDuplicates = mutableListOf<String>()
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
        val sizeGroups = codeFiles.groupBy { it.size }
        sizeGroups.forEach { (size, files) ->
            if (files.size > 1 && size > 1000) { // –§–∞–π–ª—ã –±–æ–ª—å—à–µ 1KB
                suspiciousDuplicates.add("üìÑ –§–∞–π–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ($size –±–∞–π—Ç):\n${files.joinToString("\n") { "  - ${it.relativePath}" }}")
            }
        }
        
        // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
        val nameGroups = codeFiles.groupBy { 
            it.relativePath.substringAfterLast("/").substringBeforeLast(".")
        }
        nameGroups.forEach { (baseName, files) ->
            if (files.size > 1) {
                suspiciousDuplicates.add("üìù –§–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ '$baseName':\n${files.joinToString("\n") { "  - ${it.relativePath}" }}")
            }
        }
        
        return if (suspiciousDuplicates.isEmpty()) {
            "‚úÖ –Ø–≤–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)"
        } else {
            "üîç **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–¥–∞:**\n\n" + suspiciousDuplicates.joinToString("\n\n")
        }
    }
    
    private fun checkArchitecture(): String {
        val session = currentSession ?: return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        val structure = session.projectStructure
        
        return buildString {
            appendLine("üèóÔ∏è **–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:**")
            appendLine()
            
            // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
            val directories = structure.files.map { 
                it.relativePath.substringBeforeLast("/", "")
            }.filter { it.isNotEmpty() }.distinct().sorted()
            
            appendLine("üìÅ **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤:**")
            directories.take(20).forEach { dir ->
                val filesInDir = structure.files.count { it.relativePath.startsWith("$dir/") }
                appendLine("- $dir/ ($filesInDir —Ñ–∞–π–ª–æ–≤)")
            }
            
            appendLine()
            appendLine("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:**")
            structure.languages.entries.sortedByDescending { it.value }.forEach { (lang, count) ->
                val percentage = (count * 100.0 / structure.totalFiles).let { "%.1f".format(it) }
                appendLine("- $lang: $count —Ñ–∞–π–ª–æ–≤ ($percentage%)")
            }
            
            appendLine()
            appendLine("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–∞–Ω—ã –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤**")
        }
    }
    
    private fun generateFinalReport(): String {
        val session = currentSession ?: return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        
        return buildString {
            appendLine("üìã **–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –†–ï–í–¨–Æ –ü–†–û–ï–ö–¢–ê**")
            appendLine("=".repeat(50))
            appendLine()
            
            appendLine("**–ü—Ä–æ–µ–∫—Ç:** ${session.projectStructure.rootPath}")
            appendLine("**–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** ${session.reviewedFiles.size} –∏–∑ ${session.projectStructure.totalFiles}")
            appendLine("**–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞:** ${session.projectStructure.totalLines}")
            appendLine()
            
            appendLine("**–û—Å–Ω–æ–≤–Ω—ã–µ —è–∑—ã–∫–∏:**")
            session.projectStructure.languages.entries.sortedByDescending { it.value }.take(5).forEach { (lang, count) ->
                appendLine("- $lang: $count —Ñ–∞–π–ª–æ–≤")
            }
            appendLine()
            
            if (session.findings.isNotEmpty()) {
                appendLine("**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**")
                session.findings.groupBy { it.severity }.forEach { (severity, findings) ->
                    appendLine("${severity.name} (${findings.size}):")
                    findings.forEach { finding ->
                        appendLine("- ${finding.type}: ${finding.description}")
                    }
                }
            } else {
                appendLine("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                appendLine("- –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                appendLine("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∫–æ–¥–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —è–∑—ã–∫–∞")
                appendLine("- –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                appendLine("- –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç")
            }
        }
    }
    
    private fun isIgnoredPath(path: String): Boolean {
        val ignoredPatterns = listOf(
            ".git", ".svn", ".hg",
            "node_modules", ".gradle", "build",
            "target", "dist", "out",
            ".idea", ".vscode", ".vs",
            "venv", ".venv", "__pycache__", "Pods",
            "*.log", "*.tmp", "*.cache"
        )
        
        return ignoredPatterns.any { pattern ->
            path.contains("/$pattern/") || path.endsWith("/$pattern") || 
            (pattern.startsWith("*.") && path.endsWith(pattern.drop(1)))
        }
    }
    
    private fun detectLanguage(extension: String, fileName: String): String {
        return when (extension.lowercase()) {
            "kt" -> "Kotlin"
            "java" -> "Java"
            "js" -> "JavaScript"
            "ts" -> "TypeScript"
            "py" -> "Python"
            "cpp", "cc", "cxx" -> "C++"
            "c" -> "C"
            "h", "hpp" -> "C/C++ Header"
            "cs" -> "C#"
            "go" -> "Go"
            "rs" -> "Rust"
            "swift" -> "Swift"
            "php" -> "PHP"
            "rb" -> "Ruby"
            "scala" -> "Scala"
            "clj" -> "Clojure"
            "hs" -> "Haskell"
            "ml" -> "OCaml"
            "r" -> "R"
            "sql" -> "SQL"
            "html" -> "HTML"
            "css" -> "CSS"
            "scss" -> "SCSS"
            "less" -> "Less"
            "xml" -> "XML"
            "json" -> "JSON"
            "yaml", "yml" -> "YAML"
            "gradle" -> "Gradle"
            else -> when (fileName.lowercase()) {
                "dockerfile" -> "Docker"
                "makefile" -> "Makefile"
                "package.json" -> "NPM Package"
                "pom.xml" -> "Maven POM"
                "requirements.txt" -> "Python Requirements"
                else -> "Unknown"
            }
        }
    }
    
    private fun countLines(file: File): Int {
        return try {
            file.readLines().size
        } catch (e: Exception) {
            0
        }
    }
}
