package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.api.createOpenAIApiImpl
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.Serializable

/**
 * –ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
 */
data class PostMessage(
    val content: String,
    val isUser: Boolean = false,
    val isAgent1: Boolean = false,
    val isError: Boolean = false
)

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ 4 —ç—Ç–∞–ø–∞ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
 */
class PostCreationService {
    
    private val openAIApi = createOpenAIApiImpl()
    
    /**
     * –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø–æ—Å—Ç–∞
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–º—É –∏ –∫–ª—é—á–µ–≤—ã–µ –º—ã—Å–ª–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
     */
    suspend fun createConcept(
        topic: String,
        keyIdeas: String,
        onMessage: (PostMessage) -> Unit
    ): PostConcept = withContext(Dispatchers.IO) {
        val prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã—Ö –∏–¥–µ–π.

–¢–ï–ú–ê: $topic

–ö–õ–Æ–ß–ï–í–´–ï –ò–î–ï–ò:
$keyIdeas

–ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
2. –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–Ω –∏ —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
3. –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Å—Ç–∞ (–≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ)
4. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (call-to-action)
5. –ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 —Ö–µ—à—Ç–µ–≥–æ–≤

–û—Ç–≤–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
**üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:** [–æ–ø–∏—Å–∞–Ω–∏–µ]
**üìù –¢–æ–Ω –∏ —Å—Ç–∏–ª—å:** [–æ–ø–∏—Å–∞–Ω–∏–µ]
**üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞:**
- –í–≤–µ–¥–µ–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
**üí° –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** [–æ–ø–∏—Å–∞–Ω–∏–µ]
**#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏:** [—Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤]
        """.trimIndent()

        try {
            val (response, _) = openAIApi.sendMessage(prompt, emptyList(), null)
            
            val message = PostMessage(
                content = "üé® **–≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏**\n\n$response",
                isUser = false,
                isAgent1 = true
            )
            onMessage(message)
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            PostConcept(
                topic = topic,
                keyIdeas = keyIdeas,
                targetAudience = extractSection(response, "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"),
                toneAndStyle = extractSection(response, "–¢–æ–Ω –∏ —Å—Ç–∏–ª—å"),
                structure = extractSection(response, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞"),
                mainMessage = extractSection(response, "–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
                hashtags = extractSection(response, "–•–µ—à—Ç–µ–≥–∏"),
                fullResponse = response
            )
        } catch (e: Exception) {
            val errorMessage = PostMessage(
                content = "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: ${e.message}",
                isUser = false,
                isError = true
            )
            onMessage(errorMessage)
            throw e
        }
    }
    
    /**
     * –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
     */
    suspend fun analyzeAndPlan(
        concept: PostConcept,
        onMessage: (PostMessage) -> Unit
    ): PostPlan = withContext(Dispatchers.IO) {
        val prompt = """
–¢—ã - —Å—Ç—Ä–∞—Ç–µ–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞–ø–∏—Å–∞–Ω–∏—è.

–ö–û–ù–¶–ï–ü–¶–ò–Ø –ü–û–°–¢–ê:
${concept.fullResponse}

–ó–ê–î–ê–ß–ê:
1. –°–æ–∑–¥–∞–π —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (3-5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
2. –ù–∞–ø–∏—à–∏ –ø–ª–∞–Ω –≤–≤–µ–¥–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
3. –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –ø–æ –ø—É–Ω–∫—Ç–∞–º
4. –°–ø–ª–∞–Ω–∏—Ä—É–π –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
5. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è SEO
6. –ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)

–û—Ç–≤–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
**üì∞ –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:**
1. [–∑–∞–≥–æ–ª–æ–≤–æ–∫ 1]
2. [–∑–∞–≥–æ–ª–æ–≤–æ–∫ 2]
3. [–∑–∞–≥–æ–ª–æ–≤–æ–∫ 3]

**üöÄ –ü–ª–∞–Ω –≤–≤–µ–¥–µ–Ω–∏—è:**
- [–ø—É–Ω–∫—Ç 1]
- [–ø—É–Ω–∫—Ç 2]
- [–ø—É–Ω–∫—Ç 3]

**üìù –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏:**
1. [—Ä–∞–∑–¥–µ–ª 1]: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è]
2. [—Ä–∞–∑–¥–µ–ª 2]: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è]
3. [—Ä–∞–∑–¥–µ–ª 3]: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è]

**üéØ –ü–ª–∞–Ω –∑–∞–∫–ª—é—á–µ–Ω–∏—è:**
- [–ø—É–Ω–∫—Ç 1]
- [–ø—É–Ω–∫—Ç 2]
- [–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é]

**üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** [—Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]
**üñºÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:** [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
        """.trimIndent()

        try {
            val (response, _) = openAIApi.sendMessage(prompt, emptyList(), null)
            
            val message = PostMessage(
                content = "üìä **–≠–¢–ê–ü 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ**\n\n$response",
                isUser = false,
                isAgent1 = true
            )
            onMessage(message)
            
            PostPlan(
                concept = concept,
                headlines = extractSection(response, "–í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"),
                introductionPlan = extractSection(response, "–ü–ª–∞–Ω –≤–≤–µ–¥–µ–Ω–∏—è"),
                mainContentPlan = extractSection(response, "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏"),
                conclusionPlan = extractSection(response, "–ü–ª–∞–Ω –∑–∞–∫–ª—é—á–µ–Ω–∏—è"),
                keywords = extractSection(response, "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"),
                visualElements = extractSection(response, "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã"),
                fullResponse = response
            )
        } catch (e: Exception) {
            val errorMessage = PostMessage(
                content = "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}",
                isUser = false,
                isError = true
            )
            onMessage(errorMessage)
            throw e
        }
    }
    
    /**
     * –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–æ—Å—Ç–∞
     * –ü–∏—à–µ—Ç –ø–æ–ª–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞
     */
    suspend fun createDraft(
        plan: PostPlan,
        onMessage: (PostMessage) -> Unit
    ): PostDraft = withContext(Dispatchers.IO) {
        val prompt = """
–¢—ã - —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ù–∞–ø–∏—à–∏ –ø–æ–ª–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.

–ü–õ–ê–ù –ü–û–°–¢–ê:
${plan.fullResponse}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–≤—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π)
2. –ù–∞–ø–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
3. –°–æ–∑–¥–∞–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å
4. –î–æ–±–∞–≤—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
5. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª—è
6. –í–∫–ª—é—á–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
7. –î–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–º–µ—Ä—ã –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**üì∞ –ó–ê–ì–û–õ–û–í–û–ö:**
[–≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫]

**üöÄ –í–í–ï–î–ï–ù–ò–ï:**
[—Ç–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω–∏—è]

**üìù –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨:**
[–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏]

**üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:**
[—Ç–µ–∫—Å—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é]

**#Ô∏è‚É£ –•–ï–®–¢–ï–ì–ò:**
[—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏]
        """.trimIndent()

        try {
            val (response, _) = openAIApi.sendMessage(prompt, emptyList(), null)
            
            val message = PostMessage(
                content = "‚úçÔ∏è **–≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞**\n\n$response",
                isUser = false,
                isAgent1 = true
            )
            onMessage(message)
            
            PostDraft(
                plan = plan,
                headline = extractSection(response, "–ó–ê–ì–û–õ–û–í–û–ö"),
                introduction = extractSection(response, "–í–í–ï–î–ï–ù–ò–ï"),
                mainContent = extractSection(response, "–û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨"),
                conclusion = extractSection(response, "–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï"),
                hashtags = extractSection(response, "–•–ï–®–¢–ï–ì–ò"),
                fullResponse = response
            )
        } catch (e: Exception) {
            val errorMessage = PostMessage(
                content = "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞: ${e.message}",
                isUser = false,
                isError = true
            )
            onMessage(errorMessage)
            throw e
        }
    }
    
    /**
     * –≠—Ç–∞–ø 4: –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ç—É—Ä–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
     * –ü–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –æ—à–∏–±–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
     */
    suspend fun finalizePost(
        draft: PostDraft,
        onMessage: (PostMessage) -> Unit
    ): FinalPost = withContext(Dispatchers.IO) {
        val prompt = """
–¢—ã - –≥–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–æ–≤–µ—Å—Ç–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –¥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ß–ï–†–ù–û–í–ò–ö –ü–û–°–¢–ê:
${draft.fullResponse}

–ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–≤–µ—Ä—å –∏ –∏—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
2. –£–ª—É—á—à–∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤
4. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —á–µ—Ç–∫–∏–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π
5. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ö–µ—à—Ç–µ–≥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã
6. –î–æ–±–∞–≤—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∏—Ö–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
7. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞ (–¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ü–û–°–¢–ê:**

[–ø–æ–ª–Ω–∞—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ—Å—Ç–∞]

**üì± –ö–†–ê–¢–ö–ê–Ø –í–ï–†–°–ò–Ø (–¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π):**

[—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è]

**üìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:**
- –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: [—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: [—Å–ø–∏—Å–æ–∫]
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã: [—Å–æ–≤–µ—Ç—ã]

**‚ú® –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:**
–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: [–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ]
–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç: [–ø—Ä–æ–≥–Ω–æ–∑]
        """.trimIndent()

        try {
            val (response, _) = openAIApi.sendMessage(prompt, emptyList(), null)
            
            val message = PostMessage(
                content = "‚ú® **–≠–¢–ê–ü 4: –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ç—É—Ä–∞**\n\n$response",
                isUser = false,
                isAgent1 = true
            )
            onMessage(message)
            
            FinalPost(
                draft = draft,
                finalVersion = extractSection(response, "–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ü–û–°–¢–ê"),
                shortVersion = extractSection(response, "–ö–†–ê–¢–ö–ê–Ø –í–ï–†–°–ò–Ø"),
                publicationTips = extractSection(response, "–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–£–ë–õ–ò–ö–ê–¶–ò–ò"),
                assessment = extractSection(response, "–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê"),
                fullResponse = response
            )
        } catch (e: Exception) {
            val errorMessage = PostMessage(
                content = "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–¥–∞–∫—Ç—É—Ä—ã: ${e.message}",
                isUser = false,
                isError = true
            )
            onMessage(errorMessage)
            throw e
        }
    }
    
    /**
     * –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –≤—Å–µ 4 —ç—Ç–∞–ø–∞
     */
    suspend fun createFullPost(
        topic: String,
        keyIdeas: String,
        onMessage: (PostMessage) -> Unit
    ): FinalPost {
        onMessage(PostMessage(
            content = "üöÄ **–ó–ê–ü–£–°–ö –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê**\n\n–¢–µ–º–∞: $topic\n–ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏: $keyIdeas\n\n–ù–∞—á–∏–Ω–∞–µ–º 4-—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞...",
            isUser = false,
            isAgent1 = true
        ))
        
        val concept = createConcept(topic, keyIdeas, onMessage)
        val plan = analyzeAndPlan(concept, onMessage)
        val draft = createDraft(plan, onMessage)
        val finalPost = finalizePost(draft, onMessage)
        
        onMessage(PostMessage(
            content = "üéâ **–°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê –ó–ê–í–ï–†–®–ï–ù–û!**\n\n–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã!",
            isUser = false,
            isAgent1 = true
        ))
        
        return finalPost
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–µ–∫—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
     */
    private fun extractSection(response: String, sectionKey: String): String {
        val lines = response.lines()
        val startIndex = lines.indexOfFirst { it.contains(sectionKey, ignoreCase = true) }
        if (startIndex == -1) return ""
        
        val nextSectionIndex = lines.drop(startIndex + 1).indexOfFirst { 
            it.startsWith("**") && it.contains(":")
        }
        
        val endIndex = if (nextSectionIndex == -1) lines.size else startIndex + 1 + nextSectionIndex
        
        return lines.subList(startIndex + 1, endIndex)
            .joinToString("\n")
            .trim()
    }
}

/**
 * –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
 */
@Serializable
data class PostConcept(
    val topic: String,
    val keyIdeas: String,
    val targetAudience: String,
    val toneAndStyle: String,
    val structure: String,
    val mainMessage: String,
    val hashtags: String,
    val fullResponse: String
)

@Serializable
data class PostPlan(
    val concept: PostConcept,
    val headlines: String,
    val introductionPlan: String,
    val mainContentPlan: String,
    val conclusionPlan: String,
    val keywords: String,
    val visualElements: String,
    val fullResponse: String
)

@Serializable
data class PostDraft(
    val plan: PostPlan,
    val headline: String,
    val introduction: String,
    val mainContent: String,
    val conclusion: String,
    val hashtags: String,
    val fullResponse: String
)

@Serializable
data class FinalPost(
    val draft: PostDraft,
    val finalVersion: String,
    val shortVersion: String,
    val publicationTips: String,
    val assessment: String,
    val fullResponse: String
)
