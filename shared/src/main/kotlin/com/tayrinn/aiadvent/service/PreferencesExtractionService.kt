package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.api.createOpenAIApiImpl
import com.tayrinn.aiadvent.data.model.*
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class PreferencesExtractionService {
    
    private val openAIApi = createOpenAIApiImpl()
    private val json = Json { ignoreUnknownKeys = true }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
     */
    suspend fun extractPreferences(
        messages: List<ChatMessage>,
        currentPreferences: UserPreferences?,
        userId: String
    ): UserPreferences? = withContext(Dispatchers.IO) {
        try {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            val recentMessages = messages.takeLast(10)
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            val extractionPrompt = createExtractionPrompt(recentMessages, currentPreferences)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            val (extractedText, _) = openAIApi.sendMessage(
                message = "$extractionPrompt\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –∏–∑–≤–ª–µ–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.",
                recentMessages = emptyList(), // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                modelName = "deepseek-ai/DeepSeek-V3-0324"
            )
            
            println("üß† –ò–ò –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: $extractedText")
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            val jsonMatch = Regex("\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}").find(extractedText)
            val jsonString = jsonMatch?.value ?: return@withContext null
            
            println("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–π JSON: $jsonString")
            
            // –ü–∞—Ä—Å–∏–º JSON –≤ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            val extractedPrefs = try {
                json.decodeFromString<UserPreferences>(jsonString)
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
                return@withContext null
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º userId
            val updatedPrefs = extractedPrefs.copy(
                userId = userId,
                lastUpdated = System.currentTimeMillis()
            )
            
            println("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: $updatedPrefs")
            updatedPrefs
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
            e.printStackTrace()
            null
        }
    }
    
    private fun createExtractionPrompt(
        messages: List<ChatMessage>,
        currentPreferences: UserPreferences?
    ): String {
        val dialogText = messages.joinToString("\n") { message ->
            val role = if (message.isUser) "user" else "assistant"
            "$role: ${message.content}"
        }
        
        val currentPrefsText = currentPreferences?.let { 
            json.encodeToString(it)
        } ?: "null"
        
        return """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞.

–î–ò–ê–õ–û–ì:
$dialogText

–¢–ï–ö–£–©–ò–ï –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø (–µ—Å–ª–∏ –µ—Å—Ç—å):
$currentPrefsText

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
   - –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è (ru, en, etc.)
   - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è)
   - –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (formal, friendly, casual)
   - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤ (short, medium, long)
   - –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏
   - –û–±–ª–∞—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
   - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ç–µ–º—ã
   - –¢–µ–º—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å

3. –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –æ—Å—Ç–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
5. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "userId": "user_id_placeholder",
  "language": "ru",
  "name": null,
  "communicationStyle": "friendly",
  "responseLength": "medium",
  "interests": [],
  "expertise": [],
  "timezone": null,
  "preferredTopics": [],
  "avoidTopics": [],
  "lastUpdated": ${System.currentTimeMillis()}
}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π!
        """.trimIndent()
    }
}
