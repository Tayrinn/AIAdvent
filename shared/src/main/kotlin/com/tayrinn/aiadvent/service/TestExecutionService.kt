package com.tayrinn.aiadvent.service

import java.io.File
import java.io.IOException
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
 */
class TestExecutionService {
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è Kotlin —Ñ–∞–π–ª–∞
     */
    suspend fun executeTests(testFilePath: String, projectDir: String): String {
        return try {
            println("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞: $testFilePath")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
            val projectRoot = projectDir
            println("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $projectRoot")
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ Gradle
            val result = executeGradleTest(projectRoot, testFilePath)
            println("‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            result
            
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: ${e.message}"
        }
    }
    
    // –£–±—Ä–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç Gradle —Ç–µ—Å—Ç—ã
     */
    private fun executeGradleTest(projectDir: String, testFilePath: String): String {
        return try {
            println("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $projectDir")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ gradlew –≤ –ø—Ä–æ–µ–∫—Ç–µ
            val gradlewFile = File(projectDir, "gradlew")
            val gradlewBatFile = File(projectDir, "gradlew.bat")
            
            val gradleCommand = when {
                gradlewFile.exists() -> "./gradlew"
                gradlewBatFile.exists() -> "gradlew.bat"
                else -> {
                    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω gradlew –≤ –ø—Ä–æ–µ–∫—Ç–µ. –¢–µ—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã."
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
            println("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ...")
            
            // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            println("üß™ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–º–∞–Ω–¥—É: $gradleCommand :shared:test --tests *SimpleCalculatorTest* --no-daemon --info")
            val testProcess = ProcessBuilder()
                .directory(File(projectDir))
                .command(gradleCommand, ":shared:test", "--tests", "*SimpleCalculatorTest*", "--no-daemon", "--info")
                .start()
            
            val testOutput = testProcess.inputStream.bufferedReader().readText()
            val testErrorOutput = testProcess.errorStream.bufferedReader().readText()
            val testExitCode = testProcess.waitFor()
            
            buildString {
                appendLine("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¢–ï–°–¢–û–í ===")
                appendLine("–ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $testExitCode")
                appendLine("–ö–æ–º–∞–Ω–¥–∞: $gradleCommand :shared:test --tests *SimpleCalculatorTest* --info")
                appendLine()
                
                if (testOutput.isNotEmpty()) {
                    appendLine("=== –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –í–´–í–û–î ===")
                    appendLine(testOutput)
                    appendLine()
                }
                
                if (testErrorOutput.isNotEmpty()) {
                    appendLine("=== –í–´–í–û–î –û–®–ò–ë–û–ö ===")
                    appendLine(testErrorOutput)
                    appendLine()
                }
                
                if (testExitCode == 0) {
                    appendLine("‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                } else {
                    appendLine("‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                }
            }
        } catch (e: Exception) {
            "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: ${e.message}"
        }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
     */
    private fun cleanupTempFiles(projectDir: String) {
        try {
            val buildGradle = File(projectDir, "build.gradle.kts")
            val settingsGradle = File(projectDir, "settings.gradle.kts")
            val buildDir = File(projectDir, "build")
            val gradleDir = File(projectDir, ".gradle")
            
            buildGradle.delete()
            settingsGradle.delete()
            buildDir.deleteRecursively()
            gradleDir.deleteRecursively()
        } catch (e: Exception) {
            println("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${e.message}")
        }
    }
    
    /**
     * –ò—â–µ—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ —Å gradlew
     */
    private fun findProjectRoot(startDir: String): String? {
        var currentDir = File(startDir)
        val maxDepth = 5
        
        repeat(maxDepth) {
            if (currentDir.exists()) {
                val gradlewFile = File(currentDir, "gradlew")
                val gradlewBatFile = File(currentDir, "gradlew.bat")
                
                if (gradlewFile.exists() || gradlewBatFile.exists()) {
                    return currentDir.absolutePath
                }
            }
            
            val parentDir = currentDir.parentFile
            if (parentDir == null || !parentDir.exists()) {
                return null
            }
            currentDir = parentDir
        }
        return null
    }
}
