package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.model.Bug
import com.tayrinn.aiadvent.data.model.BugAnalysis
import com.tayrinn.aiadvent.data.model.Fix
import com.tayrinn.aiadvent.data.repository.OpenAIChatRepository

class BugFixService(
    private val openAIRepository: OpenAIChatRepository
) {
    // BugFixService –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ OpenAIChatRepository
    // –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ OpenAIApiImpl

    suspend fun analyzeAndFixBugs(sourceCode: String): BugAnalysis {
        return try {
            println("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∞–≥–æ–≤ —á–µ—Ä–µ–∑ –ò–ò...")
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ –ò–ò
            val bugs = analyzeCodeWithAI(sourceCode)
            
            // –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∞–≥–æ–≤
            val fixes = createFixesFromBugs(bugs)
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            val summary = if (bugs.isEmpty()) {
                "‚úÖ –ö–æ–¥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —è–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            } else {
                "üîç –ù–∞–π–¥–µ–Ω–æ ${bugs.size} –ø—Ä–æ–±–ª–µ–º, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ ${fixes.size} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            }
            
            BugAnalysis(bugs, fixes, summary)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–≥–æ–≤: ${e.message}")
            BugAnalysis(
                bugs = listOf(Bug(0, "analysis_error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞: ${e.message}", "high")),
                fixes = emptyList(),
                summary = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )
        }
    }
    
    private suspend fun analyzeCodeWithAI(sourceCode: String): List<Bug> {
        val prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –Ω–∞ Kotlin –∏ –Ω–∞–π–¥–∏ –±–∞–≥–∏. –ö–æ–¥:
            ```kotlin
            $sourceCode
            ```
            
            –ò—â–∏: –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã !!, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–±–ª–µ–º—ã —Å null, –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
            
            –í–µ—Ä–Ω–∏ JSON:
            {
                "bugs": [
                    {
                        "line": –Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏,
                        "type": "—Ç–∏–ø_–ø—Ä–æ–±–ª–µ–º—ã", 
                        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
                        "severity": "high|medium|low"
                    }
                ]
            }
        """.trimIndent()

        return try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ OpenAI API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–≥–æ–≤
            // –ü–µ—Ä–µ–¥–∞–µ–º maxTokens –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å GPT-5
            val response = openAIRepository.sendMessage(prompt, 4000)
            val bugs = parseAIResponse(response.first)
            
            // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–∑—É
            println("ü§ñ **AI –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù:**")
            if (bugs.isNotEmpty()) {
                println("üîç –ù–∞–π–¥–µ–Ω–æ ${bugs.size} –ø—Ä–æ–±–ª–µ–º:")
                bugs.forEach { bug ->
                    val severityIcon = when (bug.severity) {
                        "high" -> "üî¥"
                        "medium" -> "üü°"
                        "low" -> "üü¢"
                        else -> "‚ö™"
                    }
                    println("$severityIcon –°—Ç—Ä–æ–∫–∞ ${bug.line}: ${bug.type} - ${bug.description}")
                }
            } else {
                println("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            }
            println()
            
            bugs
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${e.message}")

            // –ï—Å–ª–∏ AI –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–∞–≥
            if (e is com.tayrinn.aiadvent.data.api.AIModelFailureException) {
                return listOf(Bug(
                    line = 1,
                    type = "ai_model_failure",
                    description = "AI –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥: ${e.message}",
                    severity = "high"
                ))
            }

            emptyList()
        }
    }

    private fun parseAIResponse(response: String): List<Bug> {
        return try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if (response.isBlank()) {
                throw com.tayrinn.aiadvent.data.api.AIModelFailureException("AI –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞")
            }

            // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
            if (response.contains("\"bugs\"")) {
                val bugs = mutableListOf<Bug>()
                val bugMatches = Regex("\"line\":\\s*(\\d+).*?\"type\":\\s*\"([^\"]+)\".*?\"description\":\\s*\"([^\"]+)\".*?\"severity\":\\s*\"([^\"]+)\"", RegexOption.DOT_MATCHES_ALL).findAll(response)

                for (match in bugMatches) {
                    val line = match.groupValues[1].toIntOrNull() ?: 1
                    val type = match.groupValues[2]
                    val description = match.groupValues[3]
                    val severity = match.groupValues[4]

                    bugs.add(Bug(line, type, description, severity))
                }
                bugs
            } else {
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
                throw com.tayrinn.aiadvent.data.api.AIModelFailureException("AI –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            }
        } catch (e: com.tayrinn.aiadvent.data.api.AIModelFailureException) {
            // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            throw e
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: ${e.message}")
            throw com.tayrinn.aiadvent.data.api.AIModelFailureException("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –º–æ–¥–µ–ª–∏: ${e.message}")
        }
    }

    fun createFixesFromBugs(bugs: List<Bug>): List<Fix> {
        val fixes = mutableListOf<Fix>()
        for (bug in bugs) {
            val fix = when (bug.type) {
                "unused_variable" -> "// –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë"
                "unsafe_operator" -> "// –ó–∞–º–µ–Ω–∏—Ç—å !! –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null"
                "logical_error" -> "// –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏"
                "string_handling" -> "// –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, trim())"
                "infinite_loop" -> "// –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –≤ —Ü–∏–∫–ª"
                "null_safety" -> "// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º"
                "unused_import" -> "// –£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç"
                "exception_risk" -> "// –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ null –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º"
                "inefficient_code" -> "// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"
                else -> "// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É"
            }

            val explanation = when (bug.type) {
                "unused_variable" -> "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç –ø–∞–º—è—Ç—å –∏ —É—Å–ª–æ–∂–Ω—è—é—Ç –∫–æ–¥"
                "unsafe_operator" -> "–û–ø–µ—Ä–∞—Ç–æ—Ä !! –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å NullPointerException –ø—Ä–∏ runtime"
                "logical_error" -> "–õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
                "string_handling" -> "–°—Ç—Ä–æ–∫–∏ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å"
                "infinite_loop" -> "–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
                "null_safety" -> "Null safety - –≤–∞–∂–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤ Kotlin –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫"
                "unused_import" -> "–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—é—Ç –∫–æ–¥"
                "exception_risk" -> "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫—Ä–∞—Ö—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                "inefficient_code" -> "–ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏"
                else -> "–ü—Ä–æ–±–ª–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
            }

            fixes.add(Fix(bug.line, fix, explanation))
        }
        return fixes
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é AI
     */
    suspend fun generateFixedCode(sourceCode: String, bugs: List<Bug>, onMessage: ((String) -> Unit)? = null): String {
        if (bugs.isEmpty()) {
            return sourceCode
        }

        val prompt = """
            –ò—Å–ø—Ä–∞–≤—å –∫–æ–¥ –Ω–∞ Kotlin, —É—Å—Ç—Ä–∞–Ω–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. 
            
            –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
            ```kotlin
            $sourceCode
            ```
            
            –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
            ${bugs.joinToString("\n") { "- –°—Ç—Ä–æ–∫–∞ ${it.line}: ${it.type} - ${it.description}" }}
            
            –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
        """.trimIndent()

        return try {
            println("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
            onMessage?.invoke("ü§ñ **–ì–ï–ù–ï–†–ò–†–£–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î...**")
            val response = openAIRepository.sendMessage(prompt, 4000)
            val fixedCode = response.first

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–¥
            if (fixedCode.isBlank()) {
                throw com.tayrinn.aiadvent.data.api.AIModelFailureException("AI –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥")
            }

            println("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω –æ—Ç AI")

            // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –û–¢–î–ï–õ–¨–ù–´–ú –°–û–û–ë–©–ï–ù–ò–ï–ú
            val fixedCodeMessage = """
ü§ñ **–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î –û–¢ AI:**
${"=".repeat(60)}
$fixedCode
${"=".repeat(60)}
            """.trimIndent()
            onMessage?.invoke(fixedCodeMessage)

            fixedCode
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞: ${e.message}")

            val errorMessage = if (e is com.tayrinn.aiadvent.data.api.AIModelFailureException) {
                "ü§ñ **–ú–û–î–ï–õ–¨ AI –ù–ï –°–ú–û–ì–õ–ê –ò–°–ü–†–ê–í–ò–¢–¨ –ö–û–î**\n\n" +
                "–ü—Ä–∏—á–∏–Ω–∞: ${e.message}\n\n" +
                "–ö–æ–¥ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            } else {
                "‚ùå **–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–î–ê:** ${e.message}"
            }

            onMessage?.invoke(errorMessage)
            sourceCode // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }
}
