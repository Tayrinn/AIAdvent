package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.api.OpenAIApi
import com.tayrinn.aiadvent.data.model.OpenAIMessage
import com.tayrinn.aiadvent.data.model.OpenAIRequest

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ ChatGPT
 */
class TestGenerationService(
    private val openAIApi: OpenAIApi
) {
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
     */
    suspend fun generateTests(sourceCode: String, fileName: String): String {
        val prompt = createTestGenerationPrompt(sourceCode, fileName)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        println("üîç TestGenerationService.generateTests:")
        println("   File name: $fileName")
        println("   Source code length: ${sourceCode.length}")
        println("   Source code preview: ${sourceCode.take(200)}...")
        println("   Prompt length: ${prompt.length}")
        println("   Prompt preview: ${prompt.take(300)}...")
        
        val request = OpenAIRequest(
            model = "gpt-5",
            messages = listOf(
                OpenAIMessage(
                    role = "system",
                    content = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.

–ü—Ä–∞–≤–∏–ª–∞:
1. –°–æ–∑–¥–∞–≤–∞–π —Ç–µ—Å—Ç—ã –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (JUnit –¥–ª—è Java/Kotlin, pytest –¥–ª—è Python, etc.)
3. –ü–æ–∫—Ä—ã–≤–∞–π –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
4. –í–∫–ª—é—á–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
5. –î–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º —Ç–µ—Å—Ç–∞–º
6. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
7. –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –∫–ª–∞—Å—Å—ã/—Ñ—É–Ω–∫—Ü–∏–∏
8. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π"""
                ),
                OpenAIMessage(
                    role = "user",
                    content = prompt
                )
            ),
            maxCompletionTokens = 2000
        )
        
        return try {
            val response = openAIApi.chatCompletion(request)
            response.choices.firstOrNull()?.message?.content 
                ?: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT"
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${e.message}"
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
     */
    private fun createTestGenerationPrompt(sourceCode: String, fileName: String): String {
        val extension = fileName.substringAfterLast(".", "").lowercase()
        val language = when (extension) {
            "kt" -> "Kotlin"
            "java" -> "Java"
            "py" -> "Python"
            "js" -> "JavaScript"
            "ts" -> "TypeScript"
            "cpp", "c" -> "C++"
            "cs" -> "C#"
            "go" -> "Go"
            "rs" -> "Rust"
            else -> "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
        }
        
        val prompt = """–°–æ–∑–¥–∞–π unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞ –Ω–∞ $language.

–§–∞–π–ª: $fileName
–ö–æ–¥:
$sourceCode

–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –¢–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤."""
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        println("üîç createTestGenerationPrompt:")
        println("   Extension: $extension")
        println("   Language: $language")
        println("   Source code in prompt: ${if (sourceCode.isNotEmpty()) "–ü–ï–†–ï–î–ê–ù" else "–ù–ï –ü–ï–†–ï–î–ê–ù"}")
        
        return prompt
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    suspend fun analyzeTestResults(testOutput: String, originalCode: String): String {
        val prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:
$testOutput

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
$originalCode

–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö/–ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
3. –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞
5. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        val request = OpenAIRequest(
            model = "gpt-5",
            messages = listOf(
                OpenAIMessage(
                    role = "system",
                    content = "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã."
                ),
                OpenAIMessage(
                    role = "user",
                    content = prompt
                )
            ),
            maxCompletionTokens = 1500
        )
        
        return try {
            val response = openAIApi.chatCompletion(request)
            response.choices.firstOrNull()?.message?.content 
                ?: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç ChatGPT"
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${e.message}"
        }
    }
}
