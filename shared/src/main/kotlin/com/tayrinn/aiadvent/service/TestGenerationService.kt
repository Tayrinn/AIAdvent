package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.api.OpenAIApi
import com.tayrinn.aiadvent.data.model.OpenAIMessage
import com.tayrinn.aiadvent.data.model.OpenAIRequest

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ ChatGPT
 */
class TestGenerationService(
    private val openAIApi: OpenAIApi
) {
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
     */
    suspend fun generateTests(sourceCode: String, fileName: String, onMessage: ((String) -> Unit)? = null): String {
        val prompt = createTestGenerationPrompt(sourceCode, fileName)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        println("üîç TestGenerationService.generateTests:")
        println("   File name: $fileName")
        println("   Source code length: ${sourceCode.length}")
        println("   Source code preview: ${sourceCode.take(200)}...")
        println("   Prompt length: ${prompt.length}")
        println("   Prompt preview: ${prompt.take(300)}...")
        
        val request = OpenAIRequest(
            model = "gpt-5",
            messages = listOf(
                OpenAIMessage(
                    role = "system",
                    content = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∫–æ–¥–∞. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ unit —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.

–ü—Ä–∞–≤–∏–ª–∞:
1. –°–æ–∑–¥–∞–≤–∞–π —Ç–µ—Å—Ç—ã –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
2. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (JUnit –¥–ª—è Java/Kotlin, pytest –¥–ª—è Python, etc.)
3. –ü–æ–∫—Ä—ã–≤–∞–π –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
4. –í–∫–ª—é—á–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
5. –î–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º —Ç–µ—Å—Ç–∞–º
6. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
7. –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –∫–ª–∞—Å—Å—ã/—Ñ—É–Ω–∫—Ü–∏–∏
8. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π"""
                ),
                OpenAIMessage(
                    role = "user",
                    content = prompt
                )
            ),
            maxCompletionTokens = 2000
        )
        
        return try {
            println("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤...")
            onMessage?.invoke("üß™ **–ì–ï–ù–ï–†–ò–†–£–Æ –¢–ï–°–¢–´...**")
            val response = openAIApi.chatCompletion(request)
            val rawContent = response.choices.firstOrNull()?.message?.content ?: ""
            println("‚úÖ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: ${rawContent.length}")

            if (rawContent.isBlank()) {
                throw com.tayrinn.aiadvent.data.api.AIModelFailureException("–ú–æ–¥–µ–ª—å AI –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –∏ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞.")
            }

            val testCode = rawContent

            // –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´ –û–¢–î–ï–õ–¨–ù–´–ú –°–û–û–ë–©–ï–ù–ò–ï–ú
            val testMessage = """
üß™ **–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´ –û–¢ AI:**
${"=".repeat(60)}
$testCode
${"=".repeat(60)}
            """.trimIndent()
            onMessage?.invoke(testMessage)

            testCode
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${e.message}")

            val errorMessage = if (e is com.tayrinn.aiadvent.data.api.AIModelFailureException) {
                "ü§ñ **–ú–û–î–ï–õ–¨ AI –ù–ï –°–ú–û–ì–õ–ê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –¢–ï–°–¢–´**\n\n" +
                "–ü—Ä–∏—á–∏–Ω–∞: ${e.message}\n\n" +
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" +
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∫–æ–¥ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à—É—é —á–∞—Å—Ç—å\n" +
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ - –≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤ (–±–µ–∑ AI)"
            } else {
                "‚ùå **–û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–°–¢–û–í:** ${e.message}"
            }

            onMessage?.invoke(errorMessage)
            "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${e.message}"
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π
     */
    private fun createTestGenerationPrompt(sourceCode: String, fileName: String): String {
        val extension = fileName.substringAfterLast(".", "").lowercase()
        val language = when (extension) {
            "kt" -> "Kotlin"
            "java" -> "Java"
            "py" -> "Python"
            "js" -> "JavaScript"
            "ts" -> "TypeScript"
            "cpp", "c" -> "C++"
            "cs" -> "C#"
            "go" -> "Go"
            "rs" -> "Rust"
            else -> "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"
        }
        
        // –°—É–º–º–∞—Ä–∏–∑—É–µ–º –∫–æ–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        val summarizedCode = summarizeCodeForTesting(sourceCode, language)

        val prompt = """–°–æ–∑–¥–∞–π unit —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–¥–∞ –Ω–∞ $language.

–§–∞–π–ª: $fileName
–ö–æ–¥:
$summarizedCode

–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –¢–æ–ª—å–∫–æ –∫–æ–¥ —Ç–µ—Å—Ç–æ–≤."""

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        println("üîç createTestGenerationPrompt:")
        println("   Extension: $extension")
        println("   Language: $language")
        println("   Original code length: ${sourceCode.length}")
        println("   Summarized code length: ${summarizedCode.length}")
        println("   Compression ratio: ${String.format("%.1f", (1.0 - summarizedCode.length.toDouble() / sourceCode.length) * 100)}%")

        return prompt
    }

    /**
     * –°—É–º–º–∞—Ä–∏–∑—É–µ—Ç –∫–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤, —É–º–µ–Ω—å—à–∞—è —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
     */
    private fun summarizeCodeForTesting(code: String, language: String): String {
        val lines = code.lines()
        val result = mutableListOf<String>()

        for (line in lines) {
            val trimmed = line.trim()

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (trimmed.isEmpty()) continue

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            when (language) {
                "Kotlin", "Java" -> {
                    if (trimmed.startsWith("//") || trimmed.startsWith("/*") || trimmed.startsWith("*")) continue
                }
                "Python" -> {
                    if (trimmed.startsWith("#")) continue
                }
                "JavaScript", "TypeScript" -> {
                    if (trimmed.startsWith("//") || trimmed.startsWith("/*")) continue
                }
            }

            // –£–ø—Ä–æ—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            val processedLine = if (line.length > 100) {
                line.substring(0, 97) + "..."
            } else {
                line
            }

            result.add(processedLine)
        }

        // –ï—Å–ª–∏ –∫–æ–¥ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π
        val summarized = result.joinToString("\n")
        return if (summarized.length > 2000) {
            extractFunctionSignatures(code, language)
        } else {
            summarized
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
     */
    private fun extractFunctionSignatures(code: String, language: String): String {
        val lines = code.lines()
        val signatures = mutableListOf<String>()

        when (language) {
            "Kotlin" -> {
                for (line in lines) {
                    val trimmed = line.trim()
                    // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ Kotlin
                    if (trimmed.contains("fun ") && trimmed.contains("(") && trimmed.contains(")")) {
                        signatures.add("// Function signature: $trimmed")
                    }
                    // –ò—â–µ–º –∫–ª–∞—Å—Å—ã
                    if (trimmed.startsWith("class ") || trimmed.startsWith("interface ")) {
                        signatures.add("// $trimmed")
                    }
                }
            }
            "Java" -> {
                for (line in lines) {
                    val trimmed = line.trim()
                    // –ò—â–µ–º –º–µ—Ç–æ–¥—ã Java
                    if ((trimmed.contains("public") || trimmed.contains("private") || trimmed.contains("protected")) &&
                        (trimmed.contains("(") && trimmed.contains(")"))) {
                        signatures.add("// Method signature: $trimmed")
                    }
                    // –ò—â–µ–º –∫–ª–∞—Å—Å—ã
                    if (trimmed.startsWith("class ") || trimmed.startsWith("interface ")) {
                        signatures.add("// $trimmed")
                    }
                }
            }
            else -> {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                return lines.take(10).joinToString("\n")
            }
        }

        return if (signatures.isNotEmpty()) {
            signatures.joinToString("\n")
        } else {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
            lines.take(20).joinToString("\n")
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ (–±–µ–∑ AI)
     */
    suspend fun generateTestsManually(sourceCode: String, fileName: String, onMessage: ((String) -> Unit)? = null): String {
        val functions = extractFunctions(sourceCode)
        val allTests = mutableListOf<String>()

        onMessage?.invoke("üìä **–ì–ï–ù–ï–†–ò–†–£–Æ –¢–ï–°–¢–´ –ü–û –ß–ê–°–¢–Ø–ú:** –ù–∞–π–¥–µ–Ω–æ ${functions.size} —Ñ—É–Ω–∫—Ü–∏–π")

        for ((index, function) in functions.withIndex()) {
            onMessage?.invoke("üß™ **–°–û–ó–î–ê–Æ –¢–ï–°–¢–´ –î–õ–Ø –§–£–ù–ö–¶–ò–ò ${index + 1}/${functions.size}:** ${function.name}")
            println("üîß Function ${index + 1}: ${function.name}")
            println("   Signature: ${function.signature}")

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
            val testCode = generateManualTest(function)
            allTests.add(testCode)
            onMessage?.invoke("‚úÖ **–¢–ï–°–¢–´ –î–õ–Ø –§–£–ù–ö–¶–ò–ò ${function.name} –°–û–ó–î–ê–ù–´**")
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        val finalTestCode = createFinalTestFile(allTests, fileName, functions)

        val testMessage = """
üß™ **–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´ –ü–û –ß–ê–°–¢–Ø–ú:**
${"=".repeat(60)}
$finalTestCode
${"=".repeat(60)}
        """.trimIndent()
        onMessage?.invoke(testMessage)

        return finalTestCode
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
     */
    private fun generateManualTest(function: FunctionInfo): String {
        val functionName = function.name
        val signature = function.signature
        val capitalizedName = functionName.replaceFirstChar { it.uppercase() }

        val testBody = when {
            // –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ divide(a: Double, b: Double?)
            signature.contains("Double") && signature.contains("Double?") -> """
    @Test
    fun test${capitalizedName}() {
        val calculator = SimpleCalculator()

        // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        val result = calculator.${functionName}(10.0, 2.0)
        assertEquals(5.0, result, 0.0)
    }

    @Test
    fun test${capitalizedName}WithZero() {
        val calculator = SimpleCalculator()

        val result = calculator.${functionName}(10.0, 0.0)
        assertEquals(Double.POSITIVE_INFINITY, result, 0.0)
    }

    @Test(expected = NullPointerException::class)
    fun test${capitalizedName}WithNull() {
        val calculator = SimpleCalculator()

        calculator.${functionName}(10.0, null)
    }
            """.trimIndent()

            // –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ add(a: Int, b: Int)
            signature.contains("Int") && signature.contains("Int)") && !signature.contains("?") -> """
    @Test
    fun test${capitalizedName}() {
        val calculator = SimpleCalculator()

        // –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
        val result = calculator.${functionName}(5, 3)
        assertEquals(8, result)
    }

    @Test
    fun test${capitalizedName}WithZero() {
        val calculator = SimpleCalculator()

        val result = calculator.${functionName}(0, 0)
        assertEquals(0, result)
    }

    @Test
    fun test${capitalizedName}WithNegative() {
        val calculator = SimpleCalculator()

        val result = calculator.${functionName}(-2, 3)
        assertEquals(1, result)
    }
            """.trimIndent()

            // –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ processString(str: String?)
            signature.contains("String?") -> """
    @Test
    fun test${capitalizedName}() {
        val calculator = SimpleCalculator()

        // –¢–µ—Å—Ç —Å null
        val result1 = calculator.${functionName}(null)
        assertEquals("empty", result1)
    }

    @Test
    fun test${capitalizedName}WithValue() {
        val calculator = SimpleCalculator()

        // –¢–µ—Å—Ç —Å –æ–±—ã—á–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        val result2 = calculator.${functionName}("hello")
        assertNotNull(result2)
    }

    @Test
    fun test${capitalizedName}WithSpaces() {
        val calculator = SimpleCalculator()

        // –¢–µ—Å—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        val result3 = calculator.${functionName}("  hello  ")
        assertEquals("hello", result3)
    }
            """.trimIndent()

            // –¢–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ countToFive()
            signature.contains("List<Int>") -> """
    @Test
    fun test${capitalizedName}() {
        val calculator = SimpleCalculator()

        val result = calculator.${functionName}()
        assertNotNull(result)
        assertTrue(result.isNotEmpty())
        assertEquals(5, result.size)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞
        assertEquals(listOf(1, 2, 3, 4, 5), result)
    }
            """.trimIndent()

            // –û–±—â–∏–π —Å–ª—É—á–∞–π
            else -> """
    @Test
    fun test${capitalizedName}() {
        val calculator = SimpleCalculator()

        // –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ ${functionName}
        // TODO: –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        // –°–∏–≥–Ω–∞—Ç—É—Ä–∞: $signature

        assertNotNull(calculator)
    }
            """.trimIndent()
        }

        return testBody
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
     */
    private fun createFinalTestFile(tests: List<String>, fileName: String, functions: List<FunctionInfo>): String {
        val testBody = tests.joinToString("\n\n")

        return """
package com.example

import org.junit.Test
import org.junit.Assert.*

class ${fileName.substringBeforeLast(".")}Test {

$testBody
}
        """.trimIndent()
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∫–æ–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º
     */
    private fun extractFunctions(code: String): List<FunctionInfo> {
        val lines = code.lines()
        val functions = mutableListOf<FunctionInfo>()

        var currentFunction: FunctionInfo? = null
        var braceCount = 0
        var initialBraceCount = 0

        println("üîç Starting function extraction...")
        println("   Total lines: ${lines.size}")

        for ((index, line) in lines.withIndex()) {
            val trimmed = line.trim()

            // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)
            if (trimmed.contains("fun ")) {
                println("   üîç Line ${index + 1} contains 'fun ': '$line'")
            }

            // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
            if (currentFunction == null && line.contains("fun ")) {
                // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é fun
                val funIndex = line.indexOf("fun ")
                if (funIndex != -1) {
                    // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ –ø–æ—Å–ª–µ fun
                    val parenStart = line.indexOf('(', funIndex)
                    if (parenStart != -1) {
                        // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
                        val parenEnd = line.indexOf(')', parenStart)
                        if (parenEnd != -1) {
                            // –í—ã—Ä–µ–∑–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
                            val signature = line.substring(funIndex, parenEnd + 1).trim()
                            val functionName = extractFunctionName(signature)
                            println("   üìç Found function at line ${index + 1}: $functionName")
                            println("   üìù Signature: '$signature'")

                            currentFunction = FunctionInfo(
                                name = functionName,
                                signature = signature,
                                body = mutableListOf()
                            )
                            initialBraceCount = countBraces(line)
                            braceCount = initialBraceCount
                            println("   üìä Initial brace count: $initialBraceCount")
                        } else {
                            println("   ‚ö†Ô∏è  No closing parenthesis found after '(' at position $parenStart")
                        }
                    } else {
                        println("   ‚ö†Ô∏è  No opening parenthesis found after 'fun '")
                    }
                }
            }

            // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
            if (currentFunction != null) {
                currentFunction.body.add(line)
                val lineBraceCount = countBraces(line)
                braceCount += lineBraceCount

                if (lineBraceCount != 0) {
                    println("   üìä Line ${index + 1} brace change: $lineBraceCount, total: $braceCount")
                }

                // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å (braceCount –≤–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é)
                if (braceCount == initialBraceCount && currentFunction.body.size > 1) {
                    functions.add(currentFunction)
                    println("   ‚úÖ Function ${currentFunction.name} completed with ${currentFunction.body.size} lines")
                    currentFunction = null
                    braceCount = 0
                    initialBraceCount = 0
                }
            }
        }

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
        if (currentFunction != null) {
            functions.add(currentFunction)
            println("   ‚úÖ Last function ${currentFunction.name} added (was not properly closed)")
        }

        println("   üìã Total functions found: ${functions.size}")
        functions.forEach { func ->
            println("     - ${func.name}: ${func.body.size} lines")
        }

        return functions
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
     */
    private fun extractFunctionName(signature: String): String {
        val funIndex = signature.indexOf("fun ")
        if (funIndex == -1) return "unknown"

        val afterFun = signature.substring(funIndex + 4)
        val spaceIndex = afterFun.indexOf(' ')
        val parenIndex = afterFun.indexOf('(')

        return when {
            spaceIndex != -1 && spaceIndex < parenIndex -> afterFun.substring(0, spaceIndex)
            parenIndex != -1 -> afterFun.substring(0, parenIndex)
            else -> "unknown"
        }
    }

    /**
     * –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫
     */
    private fun countBraces(line: String): Int {
        var count = 0
        for (char in line) {
            when (char) {
                '{' -> count++
                '}' -> count--
            }
        }
        return count
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    data class FunctionInfo(
        val name: String,
        val signature: String,
        val body: MutableList<String>
    )
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
     */
    suspend fun analyzeTestResults(testOutput: String, originalCode: String): String {
        val prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:
$testOutput

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
$originalCode

–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö/–ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
3. –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–¥–∞
5. –û–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        val request = OpenAIRequest(
            model = "gpt-5",
            messages = listOf(
                OpenAIMessage(
                    role = "system",
                    content = "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã."
                ),
                OpenAIMessage(
                    role = "user",
                    content = prompt
                )
            ),
            maxCompletionTokens = 1500
        )
        
        return try {
            val response = openAIApi.chatCompletion(request)
            val content = response.choices.firstOrNull()?.message?.content

            if (content.isNullOrBlank()) {
                throw com.tayrinn.aiadvent.data.api.AIModelFailureException("–ú–æ–¥–µ–ª—å AI –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π.")
            }

            content
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${e.message}"
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private fun cleanTestResponse(response: String): String {
        var cleaned = response.trim()

        // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ markdown
        cleaned = cleaned.replace(Regex("```\\w*\\s*"), "")
        cleaned = cleaned.replace(Regex("```\\s*"), "")

        // –£–±–∏—Ä–∞–µ–º "kotlin" –∏–∑ –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (cleaned.startsWith("kotlin\n")) {
            cleaned = cleaned.substring(7)
        }

        val lines = cleaned.lines().toMutableList()

        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        while (lines.isNotEmpty() && lines.first().trim().isEmpty()) {
            lines.removeAt(0)
        }

        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        while (lines.isNotEmpty() && lines.last().trim().isEmpty()) {
            lines.removeAt(lines.lastIndex)
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        val processedLines = lines.map { line ->
            val trimmed = line.trim()

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è package –∏ class (–æ–Ω–∏ –±—É–¥—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ)
            if (trimmed.startsWith("package ")) {
                return@map null
            }

            // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã JUnit, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            if (trimmed.startsWith("import org.junit.jupiter.api.Test") ||
                trimmed.startsWith("import org.junit.jupiter.api.Assertions.*") ||
                (trimmed.startsWith("import ") && trimmed.contains("junit") && trimmed.contains("class "))) {
                return@map null
            }

            // –£–±–∏—Ä–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è class —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç "Test"
            if (trimmed.startsWith("class ") && trimmed.contains("Test")) {
                return@map null
            }

            // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if (trimmed.startsWith("//") && trimmed.length < 15) {
                return@map null
            }

            // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            line.trimEnd()
        }.filterNotNull()

        cleaned = processedLines.joinToString("\n")

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª–µ–µ 2 –ø–æ–¥—Ä—è–¥)
        cleaned = cleaned.replace(Regex("\n{3,}"), "\n\n")

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        cleaned = cleaned.trimStart()

        return cleaned
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
     */
    private fun createSimpleTestTemplate(functionName: String, signature: String): String {
        val capitalizedName = functionName.replaceFirstChar { it.uppercase() }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —É–º–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        val testBody = when {
            signature.contains("Double") && signature.contains("Double?") -> {
                """
        val calculator = SimpleCalculator()

        // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        val result = calculator.$functionName(10.0, 2.0)
        assertEquals(5.0, result, 0.0)

        // –¢–µ—Å—Ç —Å null –∑–Ω–∞—á–µ–Ω–∏–µ–º
        try {
            calculator.$functionName(10.0, null)
            fail("Expected NullPointerException")
        } catch (e: NullPointerException) {
            // –û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        }
                """.trimIndent()
            }
            signature.contains("Int") && signature.contains("Int)") -> {
                """
        val calculator = SimpleCalculator()

        // –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
        val result = calculator.$functionName(5, 3)
        assertEquals(8, result) // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        val result2 = calculator.$functionName(0, 0)
        assertEquals(0, result2)
                """.trimIndent()
            }
            signature.contains("String?") -> {
                """
        val calculator = SimpleCalculator()

        // –¢–µ—Å—Ç —Å null
        val result1 = calculator.$functionName(null)
        assertEquals("empty", result1)

        // –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        val result2 = calculator.$functionName("test")
        assertNotNull(result2)
                """.trimIndent()
            }
            signature.contains("List<Int>") -> {
                """
        val calculator = SimpleCalculator()

        val result = calculator.$functionName()
        assertNotNull(result)
        assertTrue(result.isNotEmpty())

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞
        // assertEquals(expectedList, result)
                """.trimIndent()
            }
            else -> {
                """
        val calculator = SimpleCalculator()

        // TODO: –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        // –°–∏–≥–Ω–∞—Ç—É—Ä–∞: $signature

        // val result = calculator.$functionName(/* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */)
        // assertEquals(/* –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */, result)
                """.trimIndent()
            }
        }

        return """
    @Test
    fun test$capitalizedName() {
$testBody
    }
        """.trimIndent()
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
     */
    fun runSelfTests(): String {
        val results = mutableListOf<String>()

        // –¢–µ—Å—Ç 0: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ SimpleTestFile.kt
        results.add("üß™ **–¢–ï–°–¢ 0: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ SimpleTestFile.kt**")
        try {
            val realFileDebug = debugFileParsing("SimpleTestFile.kt")
            results.add(realFileDebug)
        } catch (e: Exception) {
            results.add("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${e.message}")
        }
        results.add("")

        // –¢–µ—Å—Ç 0.5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        results.add("üß™ **–¢–ï–°–¢ 0.5: –ü–∞—Ä—Å–∏–Ω–≥ —Å –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º**")
        val hardcodedContent = """
package com.example

class SimpleCalculator {

    fun divide(a: Double, b: Double?): Double {
        return a / b!!
    }

    fun add(a: Int, b: Int): Int {
        return a + b
    }

    fun processString(str: String?): String {
        if (str == null) {
            return "empty"
        }
        return str
    }

    fun countToFive(): List<Int> {
        val result = mutableListOf<Int>()
        var i = 1
        while (i <= 5) {
            result.add(i)
        }
        return result
    }
}
        """.trimIndent()

        results.add("   –ñ–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:")
        hardcodedContent.lines().forEachIndexed { index, line ->
            results.add("   ${String.format("%2d", index + 1)}: $line")
        }
        results.add("")

        val hardcodedFunctions = extractFunctions(hardcodedContent)
        results.add("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${hardcodedFunctions.size}")
        hardcodedFunctions.forEach { func ->
            results.add("   ‚úÖ ${func.name}: ${func.signature}")
        }

        if (hardcodedFunctions.size != 4) {
            results.add("   ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 4 —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–π–¥–µ–Ω–æ ${hardcodedFunctions.size}")
        } else {
            results.add("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        }
        results.add("")

        // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ)
        val testCode = """
package com.example

class SimpleCalculator {

    fun divide(a: Double, b: Double?): Double {
        return a / b!!
    }

    fun add(a: Int, b: Int): Int {
        return a + b
    }

    fun processString(str: String?): String {
        return str ?: "empty"
    }

    fun countToFive(): List<Int> {
        return listOf(1, 2, 3, 4, 5)
    }
}
        """.trimIndent()

        results.add("üß™ **–¢–ï–°–¢ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–π —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏**")
        results.add("   –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:")
        testCode.lines().forEachIndexed { index, line ->
            results.add("   ${String.format("%2d", index + 1)}: $line")
        }
        results.add("")

        val functions = extractFunctions(testCode)
        results.add("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${functions.size}")
        functions.forEach { func ->
            results.add("   ‚úÖ ${func.name}: ${func.signature}")
        }

        if (functions.size != 4) {
            results.add("   ‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å 4 —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞–π–¥–µ–Ω–æ ${functions.size}")
        } else {
            results.add("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        }

        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
        results.add("\nüß™ **–¢–ï–°–¢ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤**")
        val testFunction = FunctionInfo("divide", "fun divide(a: Double, b: Double?): Double", mutableListOf())
        val generatedTest = generateManualTest(testFunction)

        results.add("   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç @Test: ${generatedTest.contains("@Test")}")
        results.add("   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç assertEquals: ${generatedTest.contains("assertEquals")}")
        results.add("   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç assertThrows: ${generatedTest.contains("assertThrows")}")

        if (generatedTest.contains("@Test") && generatedTest.contains("assertEquals") && generatedTest.contains("assertThrows")) {
            results.add("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        } else {
            results.add("   ‚ùå –û–®–ò–ë–ö–ê: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        }

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        results.add("\nüß™ **–¢–ï–°–¢ 3: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª**")
        val finalFile = createFinalTestFile(listOf(generatedTest), "Test", functions)

        results.add("   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç package: ${finalFile.contains("package com.example")}")
        results.add("   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç imports: ${finalFile.contains("import org.junit")}")
        results.add("   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç class: ${finalFile.contains("class TestTest")}")
        results.add("   –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç @Test: ${finalFile.contains("@Test")}")

        if (finalFile.contains("package com.example") &&
            finalFile.contains("import org.junit") &&
            finalFile.contains("class TestTest") &&
            finalFile.contains("@Test")) {
            results.add("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        } else {
            results.add("   ‚ùå –û–®–ò–ë–ö–ê: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        }

        return results.joinToString("\n")
    }

    companion object {
        /**
         * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è extractFunctions –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         */
        @JvmStatic
        fun extractFunctionsStatic(code: String): List<FunctionInfo> {
            val lines = code.lines()
            val functions = mutableListOf<FunctionInfo>()

            var currentFunction: FunctionInfo? = null
            var braceCount = 0
            var initialBraceCount = 0

            for ((index, line) in lines.withIndex()) {
                val trimmed = line.trim()

                // –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞
                if (currentFunction == null && line.contains("fun ")) {
                    // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é fun
                    val funIndex = line.indexOf("fun ")
                    if (funIndex != -1) {
                        // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ –ø–æ—Å–ª–µ fun
                        val parenStart = line.indexOf('(', funIndex)
                        if (parenStart != -1) {
                            // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
                            val parenEnd = line.indexOf(')', parenStart)
                            if (parenEnd != -1) {
                                // –í—ã—Ä–µ–∑–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
                                val signature = line.substring(funIndex, parenEnd + 1).trim()
                                val functionName = extractFunctionNameStatic(signature)
                                println("   üìç Found function at line ${index + 1}: $functionName")
                                println("   üìù Signature: '$signature'")

                                currentFunction = FunctionInfo(
                                    name = functionName,
                                    signature = signature,
                                    body = mutableListOf()
                                )
                                initialBraceCount = countBracesStatic(line)
                                braceCount = initialBraceCount
                            }
                        }
                    }
                }

                // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                if (currentFunction != null) {
                    currentFunction.body.add(line)
                    val lineBraceCount = countBracesStatic(line)
                    braceCount += lineBraceCount

                    // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å (braceCount –≤–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é)
                    if (braceCount == initialBraceCount && currentFunction.body.size > 1) {
                        functions.add(currentFunction)
                        println("   ‚úÖ Function ${currentFunction.name} completed with ${currentFunction.body.size} lines")
                        currentFunction = null
                        braceCount = 0
                        initialBraceCount = 0
                    }
                }
            }

            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
            if (currentFunction != null) {
                functions.add(currentFunction)
                println("   ‚úÖ Last function ${currentFunction.name} added (was not properly closed)")
            }

            return functions
        }

        /**
         * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è extractFunctionName –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         */
        @JvmStatic
        fun extractFunctionNameStatic(signature: String): String {
            val funIndex = signature.indexOf("fun ")
            if (funIndex == -1) return "unknown"

            val afterFun = signature.substring(funIndex + 4)
            val spaceIndex = afterFun.indexOf(' ')
            val parenIndex = afterFun.indexOf('(')

            return when {
                spaceIndex != -1 && spaceIndex < parenIndex -> afterFun.substring(0, spaceIndex)
                parenIndex != -1 -> afterFun.substring(0, parenIndex)
                else -> "unknown"
            }
        }

        /**
         * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è countBraces –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         */
        @JvmStatic
        private fun countBracesStatic(line: String): Int {
            var count = 0
            for (char in line) {
                when (char) {
                    '{' -> count++
                    '}' -> count--
                }
            }
            return count
        }

        /**
         * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è debugFileParsing –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         */
        @JvmStatic
        fun debugFileParsingStatic(filePath: String): String {
            val results = mutableListOf<String>()

            try {
                val fileService = com.tayrinn.aiadvent.service.FileService()
                // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                val possiblePaths = listOf(
                    filePath,
                    "/Users/tayrinn/AndroidStudioProjects/AIAdvent/$filePath",
                    "./$filePath",
                    System.getProperty("user.dir") + "/$filePath"
                )

                var sourceCode = ""
                var actualPath = ""

                results.add("üîç **–ü–û–ò–°–ö –§–ê–ô–õ–ê:**")
                results.add("   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${System.getProperty("user.dir")}")
                results.add("   –ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª: $filePath")
                results.add("")

                for (path in possiblePaths) {
                    try {
                        results.add("   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: $path")
                        sourceCode = fileService.readFile(path)
                        if (sourceCode.startsWith("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")) {
                            results.add("   ‚ùå –û—à–∏–±–∫–∞: $sourceCode")
                        } else {
                            actualPath = path
                            results.add("   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $path (${sourceCode.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                            break
                        }
                    } catch (e: Exception) {
                        results.add("   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e.message}")
                    }
                }

                if (sourceCode.isEmpty() || sourceCode.startsWith("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")) {
                    results.add("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏!")
                    return results.joinToString("\n")
                }

                results.add("üîç **–û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –§–ê–ô–õ–ê: $filePath**")
                results.add("   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sourceCode.length} —Å–∏–º–≤–æ–ª–æ–≤")
                results.add("")

                results.add("üìã **–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê:**")
                sourceCode.lines().forEachIndexed { index, line ->
                    results.add("   ${String.format("%2d", index + 1)}: $line")
                }
                results.add("")

                val functions = extractFunctionsStatic(sourceCode)
                results.add("üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:**")
                results.add("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${functions.size}")

                if (functions.isEmpty()) {
                    results.add("   ‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    results.add("")
                    results.add("üîç **–ü–†–û–í–ï–†–ö–ê –°–¢–†–û–ö –° 'fun ':**")
                    sourceCode.lines().forEachIndexed { index, line ->
                        if (line.contains("fun ")) {
                            results.add("   üìç –°—Ç—Ä–æ–∫–∞ ${index + 1}: '$line'")
                            // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–∫–æ–±–∫–∏
                            val funIndex = line.indexOf("fun ")
                            val parenStart = line.indexOf('(', funIndex)
                            val parenEnd = line.indexOf(')', parenStart)
                            results.add("      funIndex=$funIndex, parenStart=$parenStart, parenEnd=$parenEnd")
                        }
                    }
                } else {
                    functions.forEach { func ->
                        results.add("   ‚úÖ ${func.name}: ${func.signature} (${func.body.size} —Å—Ç—Ä–æ–∫)")
                    }
                }

            } catch (e: Exception) {
                results.add("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Ñ–∞–π–ª–∞: ${e.message}")
            }

            return results.joinToString("\n")
        }

        /**
         * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è main –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
         */
        @JvmStatic
        fun main(args: Array<String>) {
        println("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–ê–†–°–ò–ù–ì–ê –§–£–ù–ö–¶–ò–ô")
        println("=================================")

        // –¢–µ—Å—Ç —Å –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        val hardcodedContent = """
package com.example

class SimpleCalculator {

    fun divide(a: Double, b: Double?): Double {
        return a / b!!
    }

    fun add(a: Int, b: Int): Int {
        return a + b
    }

    fun processString(str: String?): String {
        if (str == null) {
            return "empty"
        }
        return str
    }

    fun countToFive(): List<Int> {
        val result = mutableListOf<Int>()
        var i = 1
        while (i <= 5) {
            result.add(i)
        }
        return result
    }
}
        """.trimIndent()

        println("üß™ –¢–ï–°–¢ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
        println("   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
        hardcodedContent.lines().forEachIndexed { index, line ->
            println("   ${String.format("%2d", index + 1)}: $line")
        }
        println()

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        val testService = object {
            fun extractFunctions(code: String): List<FunctionInfo> {
                return TestGenerationService.extractFunctionsStatic(code)
            }
            fun extractFunctionName(signature: String): String {
                return TestGenerationService.extractFunctionNameStatic(signature)
            }
            fun debugFileParsing(filePath: String): String {
                return TestGenerationService.debugFileParsingStatic(filePath)
            }
        }
        val functions = testService.extractFunctions(hardcodedContent)
        println("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        println("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${functions.size}")

        if (functions.isEmpty()) {
            println("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            println("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:")

            hardcodedContent.lines().forEachIndexed { index, line ->
                if (line.contains("fun ")) {
                    val funIndex = line.indexOf("fun ")
                    val parenStart = line.indexOf('(', funIndex)
                    val parenEnd = line.indexOf(')', parenStart)
                    println("   –°—Ç—Ä–æ–∫–∞ ${index + 1}: '$line'")
                    println("      funIndex=$funIndex, parenStart=$parenStart, parenEnd=$parenEnd")

                    if (parenEnd != -1) {
                        val signature = line.substring(funIndex, parenEnd + 1).trim()
                        println("      –°–∏–≥–Ω–∞—Ç—É—Ä–∞: '$signature'")

                        val functionName = testService.extractFunctionName(signature)
                        println("      –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏: '$functionName'")
                    }
                    println()
                }
            }
        } else {
            functions.forEachIndexed { _, func ->
                println("   ‚úÖ ${func.name}: ${func.signature} (${func.body.size} —Å—Ç—Ä–æ–∫)")
            }
        }

        println("\n" + "=".repeat(50))

        // –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
        println("\nüß™ –¢–ï–°–¢ 2: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ SimpleTestFile.kt")
        val debugResult = testService.debugFileParsing("SimpleTestFile.kt")
        println(debugResult)

        println("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        }
    }

    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    fun debugFileParsing(filePath: String): String {
        val results = mutableListOf<String>()

        try {
            val fileService = com.tayrinn.aiadvent.service.FileService()
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
            val possiblePaths = listOf(
                filePath,
                "/Users/tayrinn/AndroidStudioProjects/AIAdvent/$filePath",
                "./$filePath",
                System.getProperty("user.dir") + "/$filePath"
            )

            var sourceCode = ""
            var actualPath = ""

            results.add("üîç **–ü–û–ò–°–ö –§–ê–ô–õ–ê:**")
            results.add("   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${System.getProperty("user.dir")}")
            results.add("   –ò—Å–∫–æ–º—ã–π —Ñ–∞–π–ª: $filePath")
            results.add("")

            for (path in possiblePaths) {
                try {
                    results.add("   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: $path")
                    sourceCode = fileService.readFile(path)
                    if (sourceCode.startsWith("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")) {
                        results.add("   ‚ùå –û—à–∏–±–∫–∞: $sourceCode")
                    } else {
                        actualPath = path
                        results.add("   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $path (${sourceCode.length} —Å–∏–º–≤–æ–ª–æ–≤)")
                        break
                    }
                } catch (e: Exception) {
                    results.add("   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e.message}")
                }
            }

            if (sourceCode.isEmpty() || sourceCode.startsWith("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")) {
                results.add("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏!")
                return results.joinToString("\n")
            }

            results.add("üîç **–û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê –§–ê–ô–õ–ê: $filePath**")
            results.add("   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${sourceCode.length} —Å–∏–º–≤–æ–ª–æ–≤")
            results.add("")

            results.add("üìã **–°–û–î–ï–†–ñ–ò–ú–û–ï –§–ê–ô–õ–ê:**")
            sourceCode.lines().forEachIndexed { index, line ->
                results.add("   ${String.format("%2d", index + 1)}: $line")
            }
            results.add("")

            val functions = extractFunctions(sourceCode)
            results.add("üìä **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:**")
            results.add("   –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: ${functions.size}")

            if (functions.isEmpty()) {
                results.add("   ‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                results.add("")
                results.add("üîç **–ü–†–û–í–ï–†–ö–ê –°–¢–†–û–ö –° 'fun ':**")
                sourceCode.lines().forEachIndexed { index, line ->
                    if (line.contains("fun ")) {
                        results.add("   üìç –°—Ç—Ä–æ–∫–∞ ${index + 1}: '$line'")
                        // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–∫–æ–±–∫–∏
                        val funIndex = line.indexOf("fun ")
                        val parenStart = line.indexOf('(', funIndex)
                        val parenEnd = line.indexOf(')', parenStart)
                        results.add("      funIndex=$funIndex, parenStart=$parenStart, parenEnd=$parenEnd")
                    }
                }
            } else {
                functions.forEach { func ->
                    results.add("   ‚úÖ ${func.name}: ${func.signature} (${func.body.size} —Å—Ç—Ä–æ–∫)")
                }
            }

        } catch (e: Exception) {
            results.add("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ —Ñ–∞–π–ª–∞: ${e.message}")
        }

        return results.joinToString("\n")
    }
}
