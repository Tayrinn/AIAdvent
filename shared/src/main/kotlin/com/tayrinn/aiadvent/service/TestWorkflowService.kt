package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.model.BugAnalysis

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω—ã–º workflow —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
 * 1. –ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–æ–≤
 * 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
 * 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
 * 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
 */
class TestWorkflowService(
    private val fileService: FileService,
    private val bugFixService: BugFixService,
    private val testGenerationService: TestGenerationService,
    private val testExecutionService: TestExecutionService
) {

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π workflow —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
     */
    suspend fun executeTestWorkflow(
        filePath: String
    ): String {
        return try {
            println("üöÄ –ó–∞–ø—É—Å–∫–∞—é workflow —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞: $filePath")
            
            // 1. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            val sourceCode = fileService.readFile(filePath)
            val fileName = fileService.getFileName(filePath)
            
            // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–≥–∏
            val bugAnalysis = bugFixService.analyzeAndFixBugs(sourceCode)
            
            // 3. –ü–û–ö–ê–ó–´–í–ê–ï–ú –ê–ù–ê–õ–ò–ó –ë–ê–ì–û–í –û–¢–î–ï–õ–¨–ù–´–ú –°–û–û–ë–©–ï–ù–ò–ï–ú
            val bugAnalysisMessage = generateBugAnalysisMessage(bugAnalysis, fileName)
            println(bugAnalysisMessage)
            
            // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
            val fixedCode = bugFixService.generateFixedCode(sourceCode, bugAnalysis.bugs)
            
            // 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª
            val fixedFilePath = filePath.replace(".kt", "_Fixed.kt")
            fileService.writeFile(fixedFilePath, fixedCode)
            println("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $fixedFilePath")
            
            // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
            val testCode = testGenerationService.generateTests(sourceCode, fileName)
            
            // 7. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª
            val testFilePath = filePath.replace(".kt", "_Test.kt")
            fileService.writeFile(testFilePath, testCode)
            
            // 8. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            val projectDir = filePath.substringBeforeLast("/")
            val testResult = testExecutionService.executeTests(testFilePath, projectDir)
            
            // 9. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            val finalReport = generateFinalReport(bugAnalysis, testCode, testResult, fileName)
            
            // –ê–Ω–∞–ª–∏–∑ –±–∞–≥–æ–≤ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –≤—ã—à–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            
            return finalReport
            
        } catch (e: Exception) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${e.message}"
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –±–∞–≥–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
     */
    private fun generateBugAnalysisMessage(bugAnalysis: BugAnalysis, fileName: String): String {
        val message = StringBuilder()
        
        message.appendLine("üîç **–ê–ù–ê–õ–ò–ó –ë–ê–ì–û–í –î–õ–Ø –§–ê–ô–õ–ê: $fileName**")
        message.appendLine("=".repeat(60))
        
        if (bugAnalysis.bugs.isNotEmpty()) {
            message.appendLine("üêõ **–ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (${bugAnalysis.bugs.size}):**")
            bugAnalysis.bugs.forEach { bug ->
                val severityIcon = when (bug.severity) {
                    "high" -> "üî¥"
                    "medium" -> "üü°"
                    "low" -> "üü¢"
                    else -> "‚ö™"
                }
                message.appendLine("$severityIcon –°—Ç—Ä–æ–∫–∞ ${bug.line}: ${bug.type}")
                message.appendLine("   ${bug.description}")
                message.appendLine()
            }
            
            message.appendLine("üîß **–ü–†–ï–î–õ–û–ñ–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (${bugAnalysis.fixes.size}):**")
            bugAnalysis.fixes.forEach { fix ->
                message.appendLine("üìù –°—Ç—Ä–æ–∫–∞ ${fix.line}:")
                message.appendLine("   ${fix.explanation}")
                message.appendLine("   ${fix.fix}")
                message.appendLine()
            }
        } else {
            message.appendLine("‚úÖ **–ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û**")
            message.appendLine("–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞")
        }
        
        message.appendLine("üìã **–ò–¢–û–ì:** ${bugAnalysis.summary}")
        message.appendLine("=".repeat(60))
        
        return message.toString()
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∞–≥–∞—Ö
     */
    private fun generateBugReport(bugAnalysis: BugAnalysis): String {
        val report = StringBuilder()
        
        report.appendLine("üîç **–ê–ù–ê–õ–ò–ó –ö–û–î–ê –ù–ê –ë–ê–ì–ò**")
        report.appendLine("=".repeat(50))
        
        if (bugAnalysis.bugs.isNotEmpty()) {
            report.appendLine("üêõ **–ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**")
            bugAnalysis.bugs.forEach { bug ->
                val severityIcon = when (bug.severity) {
                    "high" -> "üî¥"
                    "medium" -> "üü°"
                    "low" -> "üü¢"
                    else -> "‚ö™"
                }
                report.appendLine("$severityIcon **–°—Ç—Ä–æ–∫–∞ ${bug.line}** - ${bug.type}")
                report.appendLine("   ${bug.description}")
                report.appendLine()
            }
            
            report.appendLine("üîß **–ü–†–ï–î–õ–û–ñ–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:**")
            bugAnalysis.fixes.forEach { fix ->
                report.appendLine("üìù **–°—Ç—Ä–æ–∫–∞ ${fix.line}**")
                report.appendLine("   ${fix.explanation}")
                report.appendLine("   ```kotlin")
                report.appendLine("   ${fix.fix}")
                report.appendLine("   ```")
                report.appendLine()
            }
        } else {
            report.appendLine("‚úÖ **–ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û**")
            report.appendLine("–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞")
        }
        
        report.appendLine("üìã **–ò–¢–û–ì:** ${bugAnalysis.summary}")
        report.appendLine()
        
        return report.toString()
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
     */
    private fun generateFinalReport(
        bugAnalysis: BugAnalysis,
        testCode: String,
        testResult: String,
        fileName: String
    ): String {
        val report = StringBuilder()
        
        report.appendLine("üöÄ **–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –§–ê–ô–õ–£: $fileName**")
        report.appendLine("=".repeat(60))
        report.appendLine()
        
        // –û—Ç—á–µ—Ç –æ –±–∞–≥–∞—Ö
        report.appendLine("üîç **–ê–ù–ê–õ–ò–ó –ë–ê–ì–û–í:**")
        if (bugAnalysis.bugs.isNotEmpty()) {
            report.appendLine("üêõ **–ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**")
            bugAnalysis.bugs.forEach { bug ->
                val severityIcon = when (bug.severity) {
                    "high" -> "üî¥"
                    "medium" -> "üü°"
                    "low" -> "üü¢"
                    else -> "‚ö™"
                }
                report.appendLine("$severityIcon **–°—Ç—Ä–æ–∫–∞ ${bug.line}** - ${bug.type}")
                report.appendLine("   ${bug.description}")
                report.appendLine()
            }
            
            report.appendLine("üîß **–ü–†–ï–î–õ–û–ñ–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:**")
            bugAnalysis.fixes.forEach { fix ->
                report.appendLine("üìù **–°—Ç—Ä–æ–∫–∞ ${fix.line}**")
                report.appendLine("   ${fix.explanation}")
                report.appendLine("   ```kotlin")
                report.appendLine("   ${fix.fix}")
                report.appendLine("   ```")
                report.appendLine()
            }
        } else {
            report.appendLine("‚úÖ **–ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û**")
            report.appendLine("–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞")
        }
        report.appendLine("üìã **–ò–¢–û–ì:** ${bugAnalysis.summary}")
        report.appendLine()
        
        // –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö
        report.appendLine("üß™ **–°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´:**")
        report.appendLine("–¢–µ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: ${fileName.replace(".kt", "_Test.kt")}")
        report.appendLine()
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        report.appendLine("‚ñ∂Ô∏è **–†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¢–ï–°–¢–û–í:**")
        report.appendLine(testResult)
        report.appendLine()
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.appendLine("üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**")
        if (bugAnalysis.bugs.isNotEmpty()) {
            report.appendLine("‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–¥–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
            report.appendLine("‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤")
            report.appendLine("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
        } else {
            report.appendLine("‚Ä¢ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            report.appendLine("‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")
        }
        
        return report.toString()
    }
}
