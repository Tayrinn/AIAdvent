package com.tayrinn.aiadvent.service

import com.tayrinn.aiadvent.data.api.OpenAIApi
import java.io.File

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
 */
class TestWorkflowService(
    private val fileService: FileService,
    private val testGenerationService: TestGenerationService,
    private val testExecutionService: TestExecutionService
) {
    
    /**
     * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è —Ñ–∞–π–ª–∞
     */
    suspend fun processFileForTesting(filePath: String): String {
        return try {
            // 1. –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            val sourceCode = fileService.readFile(filePath)
            if (sourceCode.startsWith("–û—à–∏–±–∫–∞")) {
                return sourceCode
            }
            
            val fileName = File(filePath).name
            if (!fileService.isSourceCodeFile(fileName)) {
                return "–§–∞–π–ª $fileName –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º"
            }
            
            // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ ChatGPT
            val generatedTests = testGenerationService.generateTests(sourceCode, fileName)
            if (generatedTests.startsWith("–û—à–∏–±–∫–∞")) {
                return generatedTests
            }
            
            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª
            val testFileName = fileService.generateTestFileName(fileName)
            val projectDir = File(filePath).parent
            val testDir = fileService.ensureTestDirectoryExists(projectDir)
            val testFilePath = "$testDir/$testFileName"
            
            val testSaved = fileService.writeFile(testFilePath, generatedTests)
            if (!testSaved) {
                return "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª"
            }
            
            // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ ChatGPT
            val analysis = testGenerationService.analyzeTestResults(
                "–¢–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $testFilePath", 
                sourceCode
            )
            
            // 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            createFinalReport(fileName, sourceCode, generatedTests, "–¢–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ", analysis, filePath)
            
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏: ${e.message}"
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
     */
    private fun createFinalReport(
        fileName: String,
        sourceCode: String,
        generatedTests: String,
        testResults: String,
        analysis: String,
        filePath: String
    ): String {
        val report = buildString {
            appendLine("üìä –û–¢–ß–ï–¢ –û –†–ê–ë–û–¢–ï –° –¢–ï–°–¢–ê–ú–ò")
            appendLine("=".repeat(50))
            appendLine("–§–∞–π–ª: $fileName")
            appendLine("–í—Ä–µ–º—è: ${java.time.LocalDateTime.now()}")
            appendLine()
            
            appendLine("üìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´")
            appendLine("-".repeat(30))
            appendLine(generatedTests)
            appendLine()
            
            appendLine("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¢–ï–°–¢–û–í")
            appendLine("-".repeat(30))
            appendLine(testResults)
            appendLine()
            
            appendLine("üîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
            appendLine("-".repeat(30))
            appendLine(analysis)
            appendLine()
            
            appendLine("=".repeat(50))
            appendLine("–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        val reportFileName = "${fileName.substringBeforeLast(".")}_TestReport.txt"
        val reportPath = File(filePath).parent + "/" + reportFileName
        fileService.writeFile(reportPath, report)
        
        return report
    }
    
    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
     */
    suspend fun quickFileAnalysis(filePath: String): String {
        return try {
            val sourceCode = fileService.readFile(filePath)
            if (sourceCode.startsWith("–û—à–∏–±–∫–∞")) {
                return sourceCode
            }
            
            val fileName = File(filePath).name
            if (!fileService.isSourceCodeFile(fileName)) {
                return "–§–∞–π–ª $fileName –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º"
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
            val analysis = testGenerationService.analyzeTestResults(
                "–ê–Ω–∞–ª–∏–∑ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤",
                sourceCode
            )
            
            analysis
        } catch (e: Exception) {
            "–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${e.message}"
        }
    }
}
