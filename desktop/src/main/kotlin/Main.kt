import androidx.compose.desktop.ui.tooling.preview.Preview
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*

import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Window
import androidx.compose.ui.window.application
import androidx.compose.ui.window.rememberWindowState
import com.tayrinn.aiadvent.data.model.ChatMessage
import com.tayrinn.aiadvent.data.api.createOpenAIApiImpl
import com.tayrinn.aiadvent.data.repository.OpenAIChatRepository
import com.tayrinn.aiadvent.data.local.ChatStorage
import com.tayrinn.aiadvent.service.*
import com.tayrinn.aiadvent.util.TestRunner
import com.tayrinn.aiadvent.service.SpeechToTextService
import auth.WebGoogleAuthService
import auth.DesktopUser
import ui.DesktopAuthScreen
import ui.DesktopAuthLoadingScreen
import kotlinx.coroutines.launch
import java.io.File
import javax.swing.JFileChooser
import javax.swing.filechooser.FileNameExtensionFilter

@Composable
@Preview
fun App() {
    val authService = remember { WebGoogleAuthService() }
    var currentUser by remember { mutableStateOf<DesktopUser?>(null) }
    var authState by remember { mutableStateOf<AuthState>(AuthState.Loading) }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    LaunchedEffect(Unit) {
        val user = authService.getCurrentUser()
        if (user != null) {
            currentUser = user
            authState = AuthState.Authenticated
        } else {
            authState = AuthState.Unauthenticated
        }
    }
    
    when (authState) {
        AuthState.Loading -> {
            DesktopAuthLoadingScreen()
        }
        
        AuthState.Unauthenticated -> {
            DesktopAuthScreen(
                authService = authService,
                onAuthSuccess = { user ->
                    currentUser = user
                    authState = AuthState.Authenticated
                    println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.name} (${user.email})")
                },
                onAuthError = { error ->
                    println("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $error")
                    authState = AuthState.Error(error)
                }
            )
        }
        
        AuthState.Authenticated -> {
            currentUser?.let { user ->
                MainAppContent(
                    user = user,
                    onSignOut = {
                        authService.signOut()
                        currentUser = null
                        authState = AuthState.Unauthenticated
                    }
                )
            }
        }
        
        is AuthState.Error -> {
            DesktopAuthScreen(
                authService = authService,
                onAuthSuccess = { user ->
                    currentUser = user
                    authState = AuthState.Authenticated
                },
                onAuthError = { error ->
                    println("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $error")
                }
            )
        }
    }
}

sealed class AuthState {
    object Loading : AuthState()
    object Unauthenticated : AuthState()
    object Authenticated : AuthState()
    data class Error(val message: String) : AuthState()
}

@Composable
fun MainAppContent(
    user: DesktopUser,
    onSignOut: () -> Unit
) {
    val messages = remember { mutableStateListOf<ChatMessage>() }
    val inputText = remember { mutableStateOf("") }
    val isLoading = remember { mutableStateOf(false) }
    val isRecording = remember { mutableStateOf(false) }
    val temperature = remember { mutableStateOf(0.7f) }
    val modelName = remember { mutableStateOf("deepseek-ai/DeepSeek-V3-0324") }
    val scope = rememberCoroutineScope()
    val testRunner = remember { TestRunner() }

    // –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    val chatStorage = remember { ChatStorage() }

    // –°–æ–∑–¥–∞–µ–º OpenAI API –∏ Repository
    val openAIApi = remember { createOpenAIApiImpl() }
    val chatRepository = remember { OpenAIChatRepository(openAIApi) }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
    val fileService = remember { FileService() }
    val bugFixService = remember { BugFixService(chatRepository) }
    val testGenerationService = remember { TestGenerationService(openAIApi) }
    val testExecutionService = remember { TestExecutionService() }
    val testWorkflowService = remember { TestWorkflowService(fileService, bugFixService, testGenerationService, testExecutionService) }

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    val speechToTextService = remember { SpeechToTextService() }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    val preferencesStorage = remember { com.tayrinn.aiadvent.data.local.PreferencesStorage() }
    val preferencesExtractionService = remember { com.tayrinn.aiadvent.service.PreferencesExtractionService() }
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    var userPreferences by remember { mutableStateOf<com.tayrinn.aiadvent.data.model.UserPreferences?>(null) }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
    val createSystemPrompt: (String) -> String = { basePrompt ->
        val preferences = userPreferences
        if (preferences != null) {
            val preferencesText = buildString {
                append("–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n")
                preferences.name?.let { append("- –ò–º—è: $it\n") }
                append("- –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: ${preferences.language}\n")
                append("- –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: ${preferences.communicationStyle}\n")
                append("- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤: ${preferences.responseLength}\n")
                
                if (preferences.interests.isNotEmpty()) {
                    append("- –ò–Ω—Ç–µ—Ä–µ—Å—ã: ${preferences.interests.joinToString(", ")}\n")
                }
                if (preferences.expertise.isNotEmpty()) {
                    append("- –û–±–ª–∞—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã: ${preferences.expertise.joinToString(", ")}\n")
                }
                if (preferences.preferredTopics.isNotEmpty()) {
                    append("- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ç–µ–º—ã: ${preferences.preferredTopics.joinToString(", ")}\n")
                }
                if (preferences.avoidTopics.isNotEmpty()) {
                    append("- –ò–∑–±–µ–≥–∞—Ç—å —Ç–µ–º: ${preferences.avoidTopics.joinToString(", ")}\n")
                }
                append("\n")
            }
            "$preferencesText$basePrompt"
        } else {
            basePrompt
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
    val playAudio: (String) -> Unit = { text ->
        scope.launch {
            try {
                println("üîä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è: ${text.take(50)}...")
                val audioFilePath = speechToTextService.generateSpeech(text)
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
                playAudioFile(audioFilePath)
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${e.message}")
            }
        }
    }


    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    LaunchedEffect(Unit) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userPreferences = preferencesStorage.loadPreferences(user.id)
            if (userPreferences == null) {
                // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Google
                userPreferences = com.tayrinn.aiadvent.data.model.UserPreferences(
                    userId = user.id,
                    name = user.name,
                    language = "ru" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
                )
                preferencesStorage.savePreferences(userPreferences!!)
                println("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name}")
            } else {
                println("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userPreferences?.name}")
            }
            
            val savedMessages = chatStorage.loadMessages()
            messages.addAll(savedMessages)

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (savedMessages.isEmpty()) {
                messages.add(
                    ChatMessage(
                        content = "üöÄ **AIAdvent Desktop with Hugging Face:** Welcome! Now powered by Hugging Face API!",
                        isUser = false,
                        isAgent1 = true
                    )
                )
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${e.message}")
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.add(
                ChatMessage(
                    content = "üöÄ **AIAdvent Desktop with Hugging Face:** Welcome! Now powered by Hugging Face API!",
                    isUser = false,
                    isAgent1 = true
                )
            )
        }
    }
    
    MaterialTheme {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    // –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∫–æ–Ω–∫–∞)
                    Card(
                        modifier = Modifier.size(48.dp),
                        shape = RoundedCornerShape(24.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Box(
                            modifier = Modifier.fillMaxSize(),
                            contentAlignment = Alignment.Center
                        ) {
                            Icon(
                                imageVector = Icons.Default.Person,
                                contentDescription = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                                tint = MaterialTheme.colorScheme.onPrimary,
                                modifier = Modifier.size(24.dp)
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.width(12.dp))
                    
                    Column {
                        Text(
                            text = "AIAdvent Desktop",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold
                        )
                        Text(
                            text = "–ü—Ä–∏–≤–µ—Ç, ${user.name}!",
                            fontSize = 14.sp,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
                
                Row {
                    Button(
                        onClick = {
                            scope.launch {
                                val selectedFile = selectFile()
                                if (selectedFile != null) {
                                    messages.add(
                                        ChatMessage(
                                            content = "üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: $selectedFile",
                                            isUser = false,
                                            isAgent1 = true
                                        )
                                    )

                                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã
                                    isLoading.value = true
                                    try {
                                        // Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                                        val onMessage: (String) -> Unit = { message: String ->
                                            messages.add(
                                                ChatMessage(
                                                    content = message,
                                                    isUser = false,
                                                    isAgent1 = true
                                                )
                                            )
                                        }

                                        val result = testWorkflowService.executeTestWorkflow(selectedFile, onMessage)

                                        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
                                        messages.add(
                                            ChatMessage(
                                                content = "üìã **–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:**\n\n$result",
                                                isUser = false,
                                                isAgent1 = true
                                            )
                                        )
                                    } catch (e: Exception) {
                                        messages.add(
                                            ChatMessage(
                                                content = "‚ùå –û—à–∏–±–∫–∞: ${e.message}",
                                                isUser = false,
                                                isError = true
                                            )
                                        )
                                    } finally {
                                        isLoading.value = false
                                    }
                                }
                            }
                        },
                        enabled = !isLoading.value
                    ) {
                        Text("üìÅ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª")
                    }
                    
                    Spacer(modifier = Modifier.width(8.dp))
                    
                    // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                    Button(
                        onClick = onSignOut,
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.error
                        )
                    ) {
                        Icon(
                            imageVector = Icons.Default.ExitToApp,
                            contentDescription = "–í—ã–π—Ç–∏",
                            modifier = Modifier.size(18.dp)
                        )
                        Spacer(modifier = Modifier.width(4.dp))
                        Text("–í—ã–π—Ç–∏")
                    }
                }
            }
            
            // –ü–æ–ª–∑—É–Ω–æ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:",
                    modifier = Modifier.width(150.dp),
                    fontSize = 14.sp
                )
                
                Slider(
                    value = temperature.value,
                    onValueChange = { temperature.value = it },
                    valueRange = 0.0f..2.0f,
                    steps = 19, // 0.1 —à–∞–≥
                    modifier = Modifier.weight(1f)
                )
                
                Text(
                    text = "${String.format("%.1f", temperature.value)}",
                    modifier = Modifier.width(50.dp),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium
                )
                
                Spacer(modifier = Modifier.width(16.dp))
                
                // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                OutlinedButton(
                    onClick = { temperature.value = 0.7f },
                    modifier = Modifier.width(100.dp)
                ) {
                    Text("–°–±—Ä–æ—Å")
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = when {
                        temperature.value < 0.5f -> "‚ùÑÔ∏è –ù–∏–∑–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"
                        temperature.value < 1.0f -> "üå§Ô∏è –°—Ä–µ–¥–Ω—è—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"
                        temperature.value < 1.5f -> "üî• –í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"
                        else -> "üí• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–æ—á–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)"
                    },
                    fontSize = 12.sp,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "ü§ñ –ú–æ–¥–µ–ª—å AI:",
                    modifier = Modifier.width(120.dp),
                    fontSize = 14.sp
                )

                OutlinedTextField(
                    value = modelName.value,
                    onValueChange = { modelName.value = it },
                    label = { Text("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏") },
                    modifier = Modifier.weight(1f),
                    enabled = !isLoading.value,
                    placeholder = { Text("deepseek-ai/DeepSeek-V3-0324") }
                )

                Spacer(modifier = Modifier.width(16.dp))

                // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏
                OutlinedButton(
                    onClick = { modelName.value = "deepseek-ai/DeepSeek-V3-0324" },
                    modifier = Modifier.width(100.dp)
                ) {
                    Text("–°–±—Ä–æ—Å")
                }
            }

            // –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            LazyColumn(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth(),
                state = rememberLazyListState()
            ) {
                items(messages) { message ->
                    ChatMessageItem(message = message, onPlayAudio = playAudio)
                    Spacer(modifier = Modifier.height(8.dp))
                }
            }
            
            // –ü–æ–ª–µ –≤–≤–æ–¥–∞
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 16.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                OutlinedTextField(
                    value = inputText.value,
                    onValueChange = { inputText.value = it },
                    label = { Text("Type a message...") },
                    modifier = Modifier.weight(1f),
                    enabled = !isLoading.value && !isRecording.value
                )

                Spacer(modifier = Modifier.width(8.dp))

                // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
                IconButton(
                    onClick = {
                        if (!isRecording.value && !isLoading.value) {
                            scope.launch {
                                try {
                                    isRecording.value = true
                                    println("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")

                                    val transcribedText = speechToTextService.recordAndTranscribe(5)
                                    if (transcribedText.isNotBlank()) {
                                        inputText.value = transcribedText
                                        println("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"$transcribedText\"")
                                    }
                                } catch (e: Exception) {
                                    println("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: ${e.message}")
                                } finally {
                                    isRecording.value = false
                                }
                            }
                        }
                    },
                    enabled = !isLoading.value,
                    modifier = Modifier.size(48.dp)
                ) {
                    Icon(
                        imageVector = if (isRecording.value) Icons.Filled.Close else Icons.Filled.PlayArrow,
                        contentDescription = if (isRecording.value) "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å" else "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å",
                        tint = if (isRecording.value) Color.Red else MaterialTheme.colorScheme.primary
                    )
                }

                Spacer(modifier = Modifier.width(8.dp))

                Button(
                    onClick = {
                        val text = inputText.value.trim()
                        if (text.isNotEmpty() && !isRecording.value) {
                            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            val userMessage = ChatMessage(
                                content = text,
                                isUser = true
                            )
                            messages.add(userMessage)

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            scope.launch {
                                try {
                                    println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
                                    val savedMessage = chatStorage.saveMessage(userMessage)
                                    println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${savedMessage.id}")
                                } catch (e: Exception) {
                                    println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
                                    e.printStackTrace()
                                }
                            }

                            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                            scope.launch { kotlinx.coroutines.delay(500) }

                            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                            inputText.value = ""
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                            when {
                                text.lowercase().contains("run tests") -> {
                                    scope.launch {
                                        isLoading.value = true
                                        try {
                                            val testReport = testRunner.runTests()
                                            messages.add(
                                                ChatMessage(
                                                    content = testReport.getSummary(),
                                                    isUser = false,
                                                    isTestReport = true
                                                )
                                            )
                                        } finally {
                                            isLoading.value = false
                                        }
                                    }
                                }
                                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞
                                // text.lowercase().contains("generate") ||
                                // text.lowercase().contains("create") ||
                                // text.lowercase().contains("make") ||
                                // text.lowercase().contains("draw") ||
                                // text.lowercase().contains("picture") ||
                                // text.lowercase().contains("image") -> {
                                //     // –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                //     messages.add(
                                //         ChatMessage(
                                //             content = "üé® **Image Generation:** Sorry, image generation is not available in desktop version yet.",
                                //             isUser = false,
                                //             isImageGeneration = true
                                //         )
                                //     )
                                // }
                                else -> {
                                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ ChatGPT –≤ —Ç—Ä—ë—Ö—ç—Ç–∞–ø–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                                    scope.launch {
                                        isLoading.value = true
                                        try {
                                            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–µ)
                                            val recentMessages = messages.takeLast(3).filter { it.content != text }

                                            // –≠—Ç–∞–ø 1: –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è AI
                                            println("ü§î –≠—Ç–∞–ø 1: AI —Ä–∞–∑–º—ã—à–ª—è–µ—Ç...")
                                            val baseThinkingPrompt = "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–±–¥—É–º–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –≤–æ–ø—Ä–æ—Å–∞. –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –±–µ–∑ —Å–∞–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                                            val thinkingPrompt = createSystemPrompt(baseThinkingPrompt)
                                            val (thinkingResponse, _) = chatRepository.sendMessage(
                                                "$thinkingPrompt\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $text", 
                                                recentMessages, 
                                                modelName.value
                                            )

                                            val thinkingMessage = ChatMessage(
                                                content = "ü§ñ **–î—É–º–∞–µ—Ç:** $thinkingResponse",
                                                isUser = false,
                                                isAgent1 = true
                                            )
                                            messages.add(thinkingMessage)
                                            chatStorage.saveMessage(thinkingMessage)

                                            kotlinx.coroutines.delay(1000)

                                            // –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
                                            println("üîç –≠—Ç–∞–ø 2: AI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è...")
                                            val baseConfirmationPrompt = "–ü—Ä–æ—á—Ç–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –æ–Ω–∏ –≤–µ—Ä–Ω—ã–µ. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É–ø—É—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å–∞–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
                                            val confirmationPrompt = createSystemPrompt(baseConfirmationPrompt)
                                            val (confirmationResponse, _) = chatRepository.sendMessage(
                                                "$confirmationPrompt\n\n–ú–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: $thinkingResponse\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $text", 
                                                emptyList(), // –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                                                modelName.value
                                            )

                                            val confirmationMessage = ChatMessage(
                                                content = "ü§ñ **–ò—â—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:** $confirmationResponse",
                                                isUser = false,
                                                isAgent1 = true
                                            )
                                            messages.add(confirmationMessage)
                                            chatStorage.saveMessage(confirmationMessage)

                                            kotlinx.coroutines.delay(1000)

                                            // –≠—Ç–∞–ø 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                                            println("‚úÖ –≠—Ç–∞–ø 3: AI –¥–∞—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç...")
                                            val baseFinalPrompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∏ –∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–π –ø–æ–ª–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                                            val finalPrompt = createSystemPrompt(baseFinalPrompt)
                                            val (finalResponse, _) = chatRepository.sendMessage(
                                                "$finalPrompt\n\n–†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: $thinkingResponse\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞: $confirmationResponse\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $text", 
                                                emptyList(), // –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
                                                modelName.value
                                            )

                                            val finalMessage = ChatMessage(
                                                content = finalResponse,
                                                isUser = false,
                                                isAgent1 = true
                                            )
                                            messages.add(finalMessage)
                                            chatStorage.saveMessage(finalMessage)

                                            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                                            scope.launch {
                                                try {
                                                    println("üß† –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞...")
                                                    val extractedPreferences = preferencesExtractionService.extractPreferences(
                                                        messages = messages.toList(), // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
                                                        currentPreferences = userPreferences,
                                                        userId = user.id
                                                    )
                                                    
                                                    if (extractedPreferences != null) {
                                                        userPreferences = extractedPreferences
                                                        preferencesStorage.savePreferences(extractedPreferences)
                                                        println("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                                                    }
                                                } catch (e: Exception) {
                                                    println("‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
                                                }
                                            }

                                            kotlinx.coroutines.delay(500)
                                        } catch (e: Exception) {
                                            val errorMessage = ChatMessage(
                                                content = "‚ùå **Error:** ${e.message}",
                                                isUser = false,
                                                isError = true
                                            )
                                            messages.add(errorMessage)

                                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                            try {
                                                chatStorage.saveMessage(errorMessage)
                                            } catch (e: Exception) {
                                                println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: ${e.message}")
                                            }
                                        } finally {
                                            isLoading.value = false
                                        }
                                    }
                                }
                            }
                        }
                    },
                    enabled = !isLoading.value && inputText.value.trim().isNotEmpty()
                ) {
                    if (isLoading.value) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(16.dp),
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    } else {
                        Icon(Icons.Default.Send, contentDescription = "Send")
                    }
                }
            }
        }
    }
}

@Composable
fun ChatMessageItem(message: ChatMessage, onPlayAudio: (String) -> Unit = {}) {
    val backgroundColor = when {
        message.isUser -> MaterialTheme.colorScheme.primaryContainer
        message.isAgent1 -> MaterialTheme.colorScheme.secondaryContainer
        message.isAgent2 -> MaterialTheme.colorScheme.tertiaryContainer
        message.isError -> Color(0xFFE57373)
        message.isImageGeneration -> Color(0xFF81C784)
        message.isTestReport -> Color(0xFF64B5F6)
        else -> MaterialTheme.colorScheme.surface
    }
    
    val textColor = when {
        message.isUser -> MaterialTheme.colorScheme.onPrimaryContainer
        message.isAgent1 -> MaterialTheme.colorScheme.onSecondaryContainer
        message.isAgent2 -> MaterialTheme.colorScheme.onTertiaryContainer
        message.isError -> Color.White
        message.isImageGeneration -> Color.White
        message.isTestReport -> Color.White
        else -> MaterialTheme.colorScheme.onSurface
    }
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = backgroundColor)
    ) {
        Box(modifier = Modifier.fillMaxWidth()) {
            Text(
                text = message.content,
                color = textColor,
                modifier = Modifier.padding(16.dp),
                fontSize = 14.sp
            )

            // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            IconButton(
                onClick = { onPlayAudio(message.content) },
                modifier = Modifier
                    .align(Alignment.TopEnd)
                    .padding(8.dp)
                    .size(32.dp)
            ) {
                Icon(
                    imageVector = Icons.Filled.PlayArrow,
                    contentDescription = "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    tint = textColor.copy(alpha = 0.7f),
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥
 */
fun selectFile(): String? {
    val fileChooser = JFileChooser()
    fileChooser.dialogTitle = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º"
    fileChooser.fileFilter = FileNameExtensionFilter(
        "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥", "kt", "java", "py", "js", "ts", "cpp", "c", "cs", "go", "rs"
    )
    
    val result = fileChooser.showOpenDialog(null)
    return if (result == JFileChooser.APPROVE_OPTION) {
        fileChooser.selectedFile.absolutePath
    } else {
        null
    }
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
 */
fun playAudioData(audioData: ByteArray) {
    try {
        println("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ (${audioData.size} –±–∞–π—Ç)...")

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        val tempFile = kotlin.io.path.createTempFile("tts_audio", ".mp3").toFile()
        tempFile.writeBytes(audioData)

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Java Sound API –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        val audioInputStream = javax.sound.sampled.AudioSystem.getAudioInputStream(tempFile)
        val clip = javax.sound.sampled.AudioSystem.getClip()

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ –∞—É–¥–∏–æ
        val format = audioInputStream.format
        println("üìä –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ: ${format.sampleRate}Hz, ${format.channels} –∫–∞–Ω–∞–ª–æ–≤, ${format.sampleSizeInBits} –±–∏—Ç")

        clip.open(audioInputStream)
        clip.start()

        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
        val durationMs = (clip.microsecondLength / 1000) + 500
        println("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${durationMs}–º—Å")
        Thread.sleep(durationMs)

        clip.close()
        audioInputStream.close()
        tempFile.delete()

        println("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: ${e.message}")
        e.printStackTrace()
    }
}

/**
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏
 */
fun playAudioFile(audioFilePath: String) {
    try {
        println("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ñ–∞–π–ª: $audioFilePath")

        val audioFile = java.io.File(audioFilePath)

        if (!audioFile.exists()) {
            println("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $audioFilePath")
            return
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        val os = System.getProperty("os.name").lowercase()
        val command = when {
            os.contains("mac") || os.contains("darwin") -> {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º afplay –¥–ª—è macOS
                arrayOf("afplay", audioFilePath)
            }
            os.contains("linux") -> {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º aplay –∏–ª–∏ mpg123 –¥–ª—è Linux
                arrayOf("mpg123", audioFilePath)
            }
            os.contains("windows") -> {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç–µ–ª—å Windows
                arrayOf("cmd", "/c", "start", "/min", audioFilePath)
            }
            else -> {
                println("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $os")
                return
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
        val commandCheck = ProcessBuilder("which", command[0])
            .redirectErrorStream(true)
            .start()

        val checkExitCode = commandCheck.waitFor()
        if (checkExitCode != 0) {
            println("‚ùå –ö–æ–º–∞–Ω–¥–∞ ${command[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        }

        println("üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É: ${command.joinToString(" ")}")

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        val process = ProcessBuilder(*command)
            .redirectErrorStream(true)
            .start()

        // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        val reader = process.inputStream.bufferedReader()
        var line: String?
        while (reader.readLine().also { line = it } != null) {
            println("Audio: $line")
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        val exitCode = process.waitFor()

        if (exitCode == 0) {
            println("‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        } else {
            println("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: $exitCode")
        }

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        audioFile.delete()
        println("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${e.message}")
        e.printStackTrace()
    }
}

fun main() = application {
    val windowState = rememberWindowState()
    
    Window(
        onCloseRequest = ::exitApplication,
        state = windowState,
        title = "AIAdvent Desktop"
    ) {
        App()
    }
}
