package com.tayrinn.aiadvent.data.local

import com.tayrinn.aiadvent.data.model.UserPreferences
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.IOException

class PreferencesStorage {
    
    private val json = Json { 
        ignoreUnknownKeys = true
        prettyPrint = true
    }
    
    private val preferencesDir = File(System.getProperty("user.home"), ".aiadvent/preferences")
    
    init {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!preferencesDir.exists()) {
            preferencesDir.mkdirs()
            println("üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${preferencesDir.absolutePath}")
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
     */
    suspend fun savePreferences(preferences: UserPreferences): Boolean = withContext(Dispatchers.IO) {
        try {
            val preferencesFile = File(preferencesDir, "${preferences.userId}_preferences.json")
            val jsonString = json.encodeToString(preferences)
            
            preferencesFile.writeText(jsonString)
            println("üíæ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${preferencesFile.absolutePath}")
            println("üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $jsonString")
            true
        } catch (e: IOException) {
            println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
            e.printStackTrace()
            false
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞
     */
    suspend fun loadPreferences(userId: String): UserPreferences? = withContext(Dispatchers.IO) {
        try {
            val preferencesFile = File(preferencesDir, "${userId}_preferences.json")
            
            if (!preferencesFile.exists()) {
                println("üìÇ –§–∞–π–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
                return@withContext null
            }
            
            val jsonString = preferencesFile.readText()
            val preferences = json.decodeFromString<UserPreferences>(jsonString)
            
            println("üìñ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
            println("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: $jsonString")
            preferences
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
            e.printStackTrace()
            null
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ
     */
    suspend fun updatePreferences(
        userId: String,
        updater: (UserPreferences?) -> UserPreferences
    ): UserPreferences? = withContext(Dispatchers.IO) {
        try {
            val currentPreferences = loadPreferences(userId)
            val updatedPreferences = updater(currentPreferences)
            
            if (savePreferences(updatedPreferences)) {
                updatedPreferences
            } else {
                null
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
            e.printStackTrace()
            null
        }
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    suspend fun deletePreferences(userId: String): Boolean = withContext(Dispatchers.IO) {
        try {
            val preferencesFile = File(preferencesDir, "${userId}_preferences.json")
            
            if (preferencesFile.exists()) {
                val deleted = preferencesFile.delete()
                if (deleted) {
                    println("üóëÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
                } else {
                    println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
                }
                deleted
            } else {
                println("üìÇ –§–∞–π–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
                true // –°—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${e.message}")
            e.printStackTrace()
            false
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
     */
    suspend fun getAllUserIds(): List<String> = withContext(Dispatchers.IO) {
        try {
            preferencesDir.listFiles { file ->
                file.isFile && file.name.endsWith("_preferences.json")
            }?.map { file ->
                file.name.removeSuffix("_preferences.json")
            } ?: emptyList()
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${e.message}")
            emptyList()
        }
    }
}
