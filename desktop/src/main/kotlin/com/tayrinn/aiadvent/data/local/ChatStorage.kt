package com.tayrinn.aiadvent.data.local

import com.tayrinn.aiadvent.data.model.ChatMessage
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.serialization.json.Json
import kotlinx.serialization.encodeToString
import kotlinx.serialization.decodeFromString
import java.io.File
import kotlin.io.path.createDirectories
import kotlin.io.path.exists

/**
 * –ü—Ä–æ—Å—Ç–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –Ω–∞ desktop
 */
class ChatStorage(private val storageDir: String = "chat_data") {

    private val mutex = Mutex()
    private val json = Json {
        prettyPrint = true
        ignoreUnknownKeys = true
        encodeDefaults = true
    }

    private val storageFile: File
        get() = File(storageDir, "messages.json").apply {
            parentFile?.mkdirs()
        }

    init {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        File(storageDir).mkdirs()
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     */
    suspend fun saveMessage(message: ChatMessage) = mutex.withLock {
        try {
            println("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.content.take(50)}...")
            val messages = loadMessagesInternal().toMutableList()
            println("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            val messageWithId = if (message.id == 0L) {
                val nextId = (messages.maxOfOrNull { it.id } ?: 0L) + 1
                message.copy(id = nextId)
            } else {
                message
            }

            messages.add(messageWithId)
            println("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageWithId.id}")

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
            if (messages.size > 100) {
                messages.sortBy { it.timestamp }
                messages.takeLast(100)
            }

            saveMessagesInternal(messages)
            println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${storageFile.absolutePath}")
            messageWithId
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}")
            e.printStackTrace()
            message // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    suspend fun loadMessages(): List<ChatMessage> = mutex.withLock {
        loadMessagesInternal()
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    suspend fun getLastMessages(limit: Int): List<ChatMessage> = mutex.withLock {
        loadMessagesInternal()
            .sortedBy { it.timestamp }
            .takeLast(limit)
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    suspend fun clearMessages() = mutex.withLock {
        try {
            if (storageFile.exists()) {
                storageFile.delete()
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${e.message}")
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private fun loadMessagesInternal(): List<ChatMessage> {
        return try {
            if (!storageFile.exists()) {
                emptyList()
            } else {
                val jsonContent = storageFile.readText()
                if (jsonContent.isBlank()) {
                    emptyList()
                } else {
                    json.decodeFromString(jsonContent)
                }
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${e.message}")
            emptyList()
        }
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private fun saveMessagesInternal(messages: List<ChatMessage>) {
        try {
            println("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ${messages.size} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª...")
            val jsonContent = json.encodeToString(messages)
            println("üìù –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω JSON —Ä–∞–∑–º–µ—Ä–æ–º: ${jsonContent.length} —Å–∏–º–≤–æ–ª–æ–≤")
            storageFile.writeText(jsonContent)
            println("‚úÖ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω: ${storageFile.absolutePath} (${storageFile.length()} –±–∞–π—Ç)")
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${e.message}")
            e.printStackTrace()
        }
    }
}
