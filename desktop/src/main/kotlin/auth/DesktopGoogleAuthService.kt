package auth

import kotlinx.coroutines.*
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import java.awt.Desktop
import java.io.*
import java.net.*
import java.security.SecureRandom
import java.util.*
import kotlin.coroutines.resume
import kotlin.coroutines.suspendCoroutine

@Serializable
data class DeviceCodeResponse(
    val device_code: String,
    val user_code: String,
    val verification_uri: String,
    val verification_uri_complete: String? = null,
    val expires_in: Int,
    val interval: Int? = null
)

@Serializable
data class GoogleTokenResponse(
    val access_token: String,
    val token_type: String,
    val expires_in: Int,
    val refresh_token: String? = null,
    val scope: String,
    val id_token: String? = null
)

@Serializable
data class TokenErrorResponse(
    val error: String,
    val error_description: String? = null
)

@Serializable
data class GoogleUserInfo(
    val id: String,
    val email: String,
    val name: String,
    val picture: String? = null
)

data class DesktopUser(
    val id: String,
    val email: String,
    val name: String,
    val picture: String?
)

data class AuthResult(
    val success: Boolean,
    val user: DesktopUser? = null,
    val error: String? = null,
    val userCode: String? = null,
    val verificationUri: String? = null
)

class DesktopGoogleAuthService {
    
    companion object {
        // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π Desktop Client ID –¥–ª—è Device Flow
        // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Desktop Client ID –≤ production
        private const val DEFAULT_CLIENT_ID = "764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com"
        private const val SCOPE = "openid email profile"
        private const val DEVICE_CODE_URL = "https://oauth2.googleapis.com/device/code"
        private const val TOKEN_URL = "https://oauth2.googleapis.com/token"
        private const val USER_INFO_URL = "https://www.googleapis.com/oauth2/v2/userinfo"
        
        // Web OAuth Flow constants
        private const val AUTH_URL = "https://accounts.google.com/o/oauth2/v2/auth"
        private const val REDIRECT_URI = "http://localhost:8080/callback"
        private const val LOCAL_SERVER_PORT = 8080
    }
    
    // –ü–æ–ª—É—á–∞–µ–º Client ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private val clientId: String by lazy {
        try {
            val configId = com.tayrinn.aiadvent.util.ConfigService.getProperty("google.oauth.client.id")
            if (configId.isNullOrBlank()) {
                println("‚ö†Ô∏è Google Client ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                DEFAULT_CLIENT_ID
            } else {
                println("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Client ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                configId
            }
        } catch (e: Exception) {
            println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Google Client ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${e.message}")
            DEFAULT_CLIENT_ID
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º Client Secret –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è Device Flow)
    private val clientSecret: String? by lazy {
        try {
            val secret = com.tayrinn.aiadvent.util.ConfigService.getProperty("google.oauth.client.secret")
            if (secret.isNullOrBlank()) {
                println("‚ö†Ô∏è Google Client Secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–º–æ–∂–µ—Ç –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è Device Flow)")
                null
            } else {
                println("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Client Secret –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                secret
            }
        } catch (e: Exception) {
            println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Google Client Secret: ${e.message}")
            null
        }
    }
    
    private val httpClient = OkHttpClient()
    private val json = Json { ignoreUnknownKeys = true }
    
    private var currentUser: DesktopUser? = null
    private var accessToken: String? = null
    
    fun isSignedIn(): Boolean = currentUser != null
    
    fun getCurrentUser(): DesktopUser? = currentUser
    
    suspend fun startSignIn(): AuthResult = withContext(Dispatchers.IO) {
        try {
            // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º device code
            val deviceCodeResponse = getDeviceCode()
            if (deviceCodeResponse == null) {
                return@withContext AuthResult(false, error = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è device code")
            }
            
            // –®–∞–≥ 2: –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            val authUrl = deviceCodeResponse.verification_uri_complete ?: deviceCodeResponse.verification_uri
            
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().browse(URI(authUrl))
            }
            
            println("üîê –û—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Google")
            println("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ${deviceCodeResponse.user_code}")
            println("üåê –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: $authUrl")
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è UI
            return@withContext AuthResult(
                success = false, // –ü–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                userCode = deviceCodeResponse.user_code,
                verificationUri = authUrl
            )
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
            e.printStackTrace()
            return@withContext AuthResult(false, error = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
        }
    }
    
    suspend fun completeSignIn(deviceCode: String, interval: Int, expiresIn: Int): AuthResult = withContext(Dispatchers.IO) {
        try {
            // –®–∞–≥ 3: Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            val tokenResponse = pollForTokens(
                deviceCode = deviceCode,
                interval = interval,
                expiresIn = expiresIn
            )
            
            if (tokenResponse == null) {
                return@withContext AuthResult(false, error = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            }
            
            accessToken = tokenResponse.access_token
            
            // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            val userInfo = getUserInfo(tokenResponse.access_token)
            
            if (userInfo == null) {
                return@withContext AuthResult(false, error = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            }
            
            currentUser = DesktopUser(
                id = userInfo.id,
                email = userInfo.email,
                name = userInfo.name,
                picture = userInfo.picture
            )
            
            return@withContext AuthResult(true, currentUser)
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
            e.printStackTrace()
            return@withContext AuthResult(false, error = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${e.message}")
        }
    }
    
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    suspend fun signIn(): AuthResult {
        val startResult = startSignIn()
        if (!startResult.success && startResult.userCode != null) {
            // –ü–æ–ª—É—á–∞–µ–º device code –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            val deviceCodeResponse = getDeviceCode()
            if (deviceCodeResponse != null) {
                return completeSignIn(
                    deviceCode = deviceCodeResponse.device_code,
                    interval = deviceCodeResponse.interval ?: 5,
                    expiresIn = deviceCodeResponse.expires_in
                )
            }
        }
        return startResult
    }
    
    fun signOut() {
        currentUser = null
        accessToken = null
        println("üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    }
    
    suspend fun getDeviceCode(): DeviceCodeResponse? = withContext(Dispatchers.IO) {
        try {
            val requestBody = mutableMapOf(
                "client_id" to clientId,
                "scope" to SCOPE
            )
            
            // –î–æ–±–∞–≤–ª—è–µ–º Client Secret, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            clientSecret?.let { secret ->
                requestBody["client_secret"] = secret
            }
            
            val formBody = requestBody.map { "${it.key}=${URLEncoder.encode(it.value, "UTF-8")}" }
                .joinToString("&")
            
            val request = Request.Builder()
                .url(DEVICE_CODE_URL)
                .post(formBody.toRequestBody("application/x-www-form-urlencoded".toMediaType()))
                .build()
            
            println("üîç Device Code Request:")
            println("   Client ID: ${clientId.take(20)}...${clientId.takeLast(10)}")
            println("   Client Secret: ${if (clientSecret != null) "*** (configured)" else "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}")
            println("   Request Body: ${requestBody.keys}")
            
            val response = httpClient.newCall(request).execute()
            val responseBody = response.body?.string()
            
            if (response.isSuccessful && responseBody != null) {
                println("‚úÖ Device code –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                json.decodeFromString<DeviceCodeResponse>(responseBody)
            } else {
                println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è device code: ${response.code} - $responseBody")
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                when (response.code) {
                    401 -> println("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Client ID –∏ Client Secret")
                    400 -> println("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    403 -> println("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–∫–ª—é—á–µ–Ω –ª–∏ Device Flow API –≤ Google Console")
                }
                
                null
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è device code: ${e.message}")
            null
        }
    }
    
    private suspend fun pollForTokens(
        deviceCode: String,
        interval: Int,
        expiresIn: Int
    ): GoogleTokenResponse? = withContext(Dispatchers.IO) {
        val startTime = System.currentTimeMillis()
        val timeoutMs = expiresIn * 1000L
        
        while (System.currentTimeMillis() - startTime < timeoutMs) {
            try {
                val requestBody = mutableMapOf(
                    "client_id" to clientId,
                    "device_code" to deviceCode,
                    "grant_type" to "urn:ietf:params:oauth:grant-type:device_code"
                )
                
                // –î–æ–±–∞–≤–ª—è–µ–º Client Secret, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                clientSecret?.let { secret ->
                    requestBody["client_secret"] = secret
                }
                
                val formBody = requestBody.map { "${it.key}=${URLEncoder.encode(it.value, "UTF-8")}" }
                    .joinToString("&")
                
                val request = Request.Builder()
                    .url(TOKEN_URL)
                    .post(formBody.toRequestBody("application/x-www-form-urlencoded".toMediaType()))
                    .build()
                
                val response = httpClient.newCall(request).execute()
                val responseBody = response.body?.string()
                
                if (response.isSuccessful && responseBody != null) {
                    // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    return@withContext json.decodeFromString<GoogleTokenResponse>(responseBody)
                } else if (responseBody != null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                    try {
                        val errorResponse = json.decodeFromString<TokenErrorResponse>(responseBody)
                        when (errorResponse.error) {
                            "authorization_pending" -> {
                                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                                println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                            }
                            "slow_down" -> {
                                // –ù—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
                                println("üêå –ó–∞–º–µ–¥–ª—è–µ–º –æ–ø—Ä–æ—Å...")
                                delay((interval + 5) * 1000L)
                                continue
                            }
                            "expired_token" -> {
                                println("‚ùå –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ")
                                return@withContext null
                            }
                            "access_denied" -> {
                                println("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                                return@withContext null
                            }
                            else -> {
                                println("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorResponse.error} - ${errorResponse.error_description}")
                                return@withContext null
                            }
                        }
                    } catch (e: Exception) {
                        println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${response.code} - $responseBody")
                        return@withContext null
                    }
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                delay(interval * 1000L)
                
            } catch (e: Exception) {
                println("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤: ${e.message}")
                delay(interval * 1000L)
            }
        }
        
        println("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ")
        return@withContext null
    }
    
    private suspend fun getUserInfo(accessToken: String): GoogleUserInfo? = withContext(Dispatchers.IO) {
        try {
            val request = Request.Builder()
                .url(USER_INFO_URL)
                .header("Authorization", "Bearer $accessToken")
                .build()
            
            val response = httpClient.newCall(request).execute()
            val responseBody = response.body?.string()
            
            if (response.isSuccessful && responseBody != null) {
                json.decodeFromString<GoogleUserInfo>(responseBody)
            } else {
                println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${response.code} - $responseBody")
                null
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${e.message}")
            null
        }
    }
    
}
