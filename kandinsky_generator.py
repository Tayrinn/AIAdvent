#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Kandinsky API
"""

import sys
import os
import time
import json
import requests
import zlib
from typing import Optional, List
from PIL import Image, ImageDraw, ImageFont
import textwrap

def create_placeholder_image(prompt: str, width: int, height: int, filepath: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞

    Args:
        prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        filepath: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞

    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    """
    print(f"üé® –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {prompt}")

    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
    image = Image.new('RGB', (width, height), color='#f0f0f0')
    draw = ImageDraw.Draw(image)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
    for y in range(height):
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–µ–≥–æ –∫ —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω–æ–º—É
        r = int(240 + (100 - 240) * y / height)
        g = int(240 + (200 - 240) * y / height)
        b = int(240 + (255 - 240) * y / height)
        draw.line([(0, y), (width, y)], fill=(r, g, b))

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞
    font_size = min(width, height) // 20
    try:
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", font_size)
    except:
        try:
            font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", font_size)
        except:
            font = ImageFont.load_default()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = "KANDINSKY PLACEHOLDER"
    title_bbox = draw.textbbox((0, 0), title, font=font)
    title_width = title_bbox[2] - title_bbox[0]
    title_x = (width - title_width) // 2
    title_y = height // 10

    # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±–≤–æ–¥–∫–æ–π
    draw.text((title_x-1, title_y-1), title, font=font, fill='white')
    draw.text((title_x+1, title_y-1), title, font=font, fill='white')
    draw.text((title_x-1, title_y+1), title, font=font, fill='white')
    draw.text((title_x+1, title_y+1), title, font=font, fill='white')
    draw.text((title_x, title_y), title, font=font, fill='#2c3e50')

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
    prompt_font_size = min(width, height) // 25
    try:
        prompt_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", prompt_font_size)
    except:
        try:
            prompt_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", prompt_font_size)
        except:
            prompt_font = ImageFont.load_default()

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    max_chars_per_line = width // (prompt_font_size // 2)
    wrapped_prompt = textwrap.fill(prompt, max_chars_per_line)

    # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    prompt_y = height // 3
    prompt_lines = wrapped_prompt.split('\n')

    for i, line in enumerate(prompt_lines):
        line_bbox = draw.textbbox((0, 0), line, font=prompt_font)
        line_width = line_bbox[2] - line_bbox[0]
        line_x = (width - line_width) // 2
        current_y = prompt_y + i * (prompt_font_size + 5)

        # –û–±–≤–æ–¥–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        draw.text((line_x-1, current_y-1), line, font=prompt_font, fill='white')
        draw.text((line_x+1, current_y-1), line, font=prompt_font, fill='white')
        draw.text((line_x-1, current_y+1), line, font=prompt_font, fill='white')
        draw.text((line_x+1, current_y+1), line, font=prompt_font, fill='white')
        draw.text((line_x, current_y), line, font=prompt_font, fill='#34495e')

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ API
    error_font_size = min(width, height) // 30
    try:
        error_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", error_font_size)
    except:
        error_font = ImageFont.load_default()

    error_msg = "API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    error_bbox = draw.textbbox((0, 0), error_msg, font=error_font)
    error_width = error_bbox[2] - error_bbox[0]
    error_x = (width - error_width) // 2
    error_y = height - height // 8

    draw.text((error_x-1, error_y-1), error_msg, font=error_font, fill='white')
    draw.text((error_x+1, error_y-1), error_msg, font=error_font, fill='white')
    draw.text((error_x-1, error_y+1), error_msg, font=error_font, fill='white')
    draw.text((error_x+1, error_y+1), error_msg, font=error_font, fill='white')
    draw.text((error_x, error_y), error_msg, font=error_font, fill='#e74c3c')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image.save(filepath, 'PNG')
    print(f"‚úÖ –ó–∞–≥–ª—É—à–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
    return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {prompt}"

def check_generation(request_id: str, base_url: str, auth_headers: dict, attempts: int = 120, delay: int = 10) -> Optional[List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Kandinsky API

    Args:
        request_id: UUID –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        base_url: –ë–∞–∑–æ–≤—ã–π URL API
        auth_headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –°–ø–∏—Å–æ–∫ URL —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è UUID: {request_id}")

    while attempts > 0:
        try:
            response = requests.get(
                base_url + f'key/api/v1/pipeline/status/{request_id}',
                headers=auth_headers
            )

            if response.status_code != 200:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                attempts -= 1
                time.sleep(delay)
                continue

            data = response.json()
            status = data.get('status')

            print(f"üìä –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {status} (–æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts})")

            if status == 'DONE':
                print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                result = data.get('result', {})
                files = result.get('files', [])
                return files if files else None

            elif status == 'FAIL':
                print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {json.dumps(data, indent=2)}")
                return None

            elif status in ['INITIAL', 'PROCESSING']:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                print(f"‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ({status}), –∂–¥–µ–º {delay} —Å–µ–∫...")
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

        attempts -= 1
        time.sleep(delay)

    print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    return None

def create_minimal_png(width: int, height: int, filepath: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PNG —Ñ–∞–π–ª"""
    # PNG signature
    png_signature = b'\x89PNG\r\n\x1a\n'

    # IHDR chunk
    ihdr_type = b'IHDR'
    ihdr_data = width.to_bytes(4, 'big') + height.to_bytes(4, 'big') + b'\x08\x02\x00\x00\x00'  # 8-bit RGB
    ihdr_length = len(ihdr_data).to_bytes(4, 'big')
    ihdr_crc = zlib.crc32(ihdr_type + ihdr_data).to_bytes(4, 'big')

    # IDAT chunk - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    idat_type = b'IDAT'
    idat_data = b'\x78\x9c\x01\x00\x00\x00\x00\x00\x00'  # empty compressed data
    idat_length = len(idat_data).to_bytes(4, 'big')
    idat_crc = zlib.crc32(idat_type + idat_data).to_bytes(4, 'big')

    # IEND chunk
    iend_type = b'IEND'
    iend_data = b''
    iend_length = b'\x00\x00\x00\x00'
    iend_crc = zlib.crc32(iend_type + iend_data).to_bytes(4, 'big')

    # –°–æ–±–∏—Ä–∞–µ–º PNG
    png_data = png_signature + ihdr_length + ihdr_type + ihdr_data + ihdr_crc + \
               idat_length + idat_type + idat_data + idat_crc + \
               iend_length + iend_type + iend_data + iend_crc

    with open(filepath, 'wb') as f:
        f.write(png_data)

def generate_kandinsky_image(prompt: str, filename: str, width: int = 1024, height: int = 1024, style: str = "DEFAULT", project_dir: str = ".") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Kandinsky API (FusionBrain)

    Args:
        prompt: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        style: –°—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        project_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞

    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ
    """
    try:
        print(f"üé® –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kandinsky API...")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
        print(f"üé≠ –°—Ç–∏–ª—å: {style}")
        print(f"üìê –†–∞–∑–º–µ—Ä: {width}x{height}")
        print(f"üìÅ –§–∞–π–ª: {filename}")
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–∞–ø–∫–∏...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É kandinsky –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("kandinsky", exist_ok=True)
        print("‚úÖ –ü–∞–ø–∫–∞ kandinsky —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # API –∫–ª—é—á–∏
        api_key = "CCA876AE3B4999C6C8875C9B2BDECA80"
        secret_key = "376E45F54D94DBC3270C676E9E89FC25"
        base_url = "https://api-key.fusionbrain.ai/"
        pipeline_id = "99d833d6-fec0-44fd-a1c2-35d6bf96b5c2"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_headers = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

        print("üîó –í—ã–∑—ã–≤–∞–µ–º Kandinsky API —á–µ—Ä–µ–∑ FusionBrain...")

        try:
            # –®–∞–≥ 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞...")
            availability_response = requests.get(base_url + 'key/api/v1/pipeline/availability', headers=auth_headers)
            if availability_response.status_code == 200:
                availability_data = availability_response.json()
                pipeline_status = availability_data.get('pipeline_status')
                print(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {pipeline_status}")

                if pipeline_status == 'DISABLED_BY_QUEUE':
                    return "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                elif pipeline_status != 'ENABLED':
                    return f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {pipeline_status}"
            else:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

            # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            print("üé® –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            params = {
                "type": "GENERATE",
                "width": width,
                "height": height,
                "numImages": 1,
                "generateParams": {
                    "query": prompt
                }
            }

            data = {
                'pipeline_id': (None, pipeline_id),
                'params': (None, json.dumps(params), 'application/json')
            }

            response = requests.post(
                base_url + 'key/api/v1/pipeline/run',
                headers=auth_headers,
                files=data
            )

            if response.status_code not in [200, 201]:
                return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} - {response.text}"

            result = response.json()
            print(f"üìã –û—Ç–≤–µ—Ç API: {json.dumps(result, indent=2)}")

            request_uuid = result.get('uuid')
            if not request_uuid:
                return "‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–µ–Ω UUID –∑–∞–ø—Ä–æ—Å–∞"

            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω —Å UUID: {request_uuid}")

            # –®–∞–≥ 2: –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            files = check_generation(request_uuid, base_url, auth_headers)

            if files:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_url = files[0]
                print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")

                image_response = requests.get(image_url)
                if image_response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    filepath = f"kandinsky/{filename}"
                    with open(filepath, 'wb') as f:
                        f.write(image_response.content)

                    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(image_response.content)} –±–∞–π—Ç")

                    return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {filepath}"
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_response.status_code} - {image_response.text}"
            else:
                return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

            return "‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∑–∞–≥–ª—É—à–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞
            print("üé® –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞...")
            filepath = f"kandinsky/{filename}"
            placeholder_msg = create_placeholder_image(prompt, width, height, filepath)

            print(f"‚úÖ –ó–∞–≥–ª—É—à–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
            return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {filepath}"

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        print(f"‚ùå {error_msg}")
        import traceback
        traceback.print_exc()

        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é –∑–∞–≥–ª—É—à–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞ –¥–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        print("üé® –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–º–ø—Ç–∞...")
        filepath = f"kandinsky/{filename}"
        try:
            placeholder_msg = create_placeholder_image(prompt, width, height, filepath)
            print(f"‚úÖ –ó–∞–≥–ª—É—à–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
            return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {filepath}"
        except Exception as placeholder_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {placeholder_error}")
            return error_msg

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python kandinsky_generator.py <prompt> [filename] [width] [height] [style] [project_dir]")
        sys.exit(1)

    prompt = sys.argv[1]
    filename = sys.argv[2] if len(sys.argv) > 2 else f"kandinsky_{int(time.time())}_{hash(prompt) % 1000000}.png"
    width = int(sys.argv[3]) if len(sys.argv) > 3 else 1024
    height = int(sys.argv[4]) if len(sys.argv) > 4 else 1024
    style = sys.argv[5] if len(sys.argv) > 5 else "DEFAULT"
    project_dir = sys.argv[6] if len(sys.argv) > 6 else "."

    result = generate_kandinsky_image(prompt, filename, width, height, style, project_dir)
    print(result)

if __name__ == "__main__":
    main()
