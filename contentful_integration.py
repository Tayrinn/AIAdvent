#!/usr/bin/env python3
"""
Contentful Integration Module
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Contentful Management API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–æ—Ç–∏–∫–∞–º–∏
"""

import os
import requests
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from dotenv import load_dotenv
import contentful_management

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ContentfulIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Contentful —á–µ—Ä–µ–∑ Management API"""
    
    def __init__(self, test_mode: bool = False):
        self.test_mode = test_mode
        self.space_id = os.getenv("CONTENTFUL_SPACE_ID")
        self.environment_id = os.getenv("CONTENTFUL_ENVIRONMENT_ID")
        self.access_token = os.getenv("CONTENTFUL_MANAGEMENT_ACCESS_TOKEN")
        
        if not all([self.space_id, self.environment_id, self.access_token]):
            logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Contentful, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
            self.test_mode = True
        
        if not self.test_mode:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Contentful Management –∫–ª–∏–µ–Ω—Ç
            try:
                self.client = contentful_management.Client(self.access_token)
                self.space = self.client.spaces().find(self.space_id)
                self.environment = self.space.environments().find(self.environment_id)
                logger.info("Contentful Management –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Contentful –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
                self.test_mode = True
        else:
            logger.info("Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    def create_cat_page(self, cat_image_url: str, cat_prompt: str, cat_description: str) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Contentful —Å –∫–æ—Ç–∏–∫–æ–º (–∞–ª–∏–∞—Å –¥–ª—è create_cat_entry)
        
        Args:
            cat_image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞
            cat_prompt: –ü—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            cat_description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        return self.create_cat_entry(cat_image_url, cat_prompt, cat_description)
    
    def create_cat_entry(self, cat_image_url: str, cat_prompt: str, cat_description: str) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ Contentful —Å –∫–æ—Ç–∏–∫–æ–º —á–µ—Ä–µ–∑ Management API
        
        Args:
            cat_image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞
            cat_prompt: –ü—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            cat_description: –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–∏–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info("–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –≤ Contentful —Å –∫–æ—Ç–∏–∫–æ–º...")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            current_date = datetime.now().strftime("%d.%m.%Y")
            entry_title = f"üê± –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫ - {current_date}"
            
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Asset –≤ Contentful
            image_title = f"Daily Cat - {datetime.now().strftime('%d.%m.%Y')}"
            image_asset = self.upload_image_asset(cat_image_url, image_title)
            
            if not image_asset:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Contentful")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            entry_data = {
                "title": {
                    "en-US": entry_title,
                    "de-DE": entry_title
                },
                "slug": {
                    "en-US": f"daily-cat-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                    "de-DE": f"daily-cat-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
                },
                "description": {
                    "en-US": cat_description,
                    "de-DE": cat_description
                },
                "imageUrl": {
                    "en-US": cat_image_url,
                    "de-DE": cat_image_url
                },
                "prompt": {
                    "en-US": cat_prompt,
                    "de-DE": cat_prompt
                },
                "generationDate": {
                    "en-US": datetime.now().strftime("%Y-%m-%d"),
                    "de-DE": datetime.now().strftime("%Y-%m-%d")
                },
                "tags": {
                    "en-US": ["–∫–æ—Ç–∏–∫", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "AI", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"],
                    "de-DE": ["–∫–æ—Ç–∏–∫", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "AI", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"]
                },
                "category": {
                    "en-US": "daily-cats",
                    "de-DE": "daily-cats"
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            if not image_asset.get('test_mode'):
                entry_data["imageAsset"] = {
                    "en-US": {
                        "sys": {
                            "type": "Link",
                            "linkType": "Asset",
                            "id": image_asset["id"]
                        }
                    },
                    "de-DE": {
                        "sys": {
                            "type": "Link",
                            "linkType": "Asset",
                            "id": image_asset["id"]
                        }
                    }
                }
            
            if self.test_mode:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
                test_entry_id = f"test-entry-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Å–æ–∑–¥–∞—é –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å {test_entry_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                test_data = {
                    "id": test_entry_id,
                    "title": entry_title,
                    "content": entry_data,
                    "created_at": datetime.now().isoformat(),
                    "status": "draft"
                }
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                os.makedirs("test_entries", exist_ok=True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
                test_file = f"test_entries/{test_entry_id}.json"
                with open(test_file, 'w', encoding='utf-8') as f:
                    json.dump(test_data, f, ensure_ascii=False, indent=2)
                
                logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {test_file}")
                
                return {
                    "success": True,
                    "entryId": test_entry_id,
                    "title": entry_title,
                    "url": f"file://{os.path.abspath(test_file)}",
                    "content": entry_data,
                    "test_mode": True
                }
            else:
                # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Management API
                entry = self.environment.entries().create(
                    None,  # ID –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    {
                        "content_type_id": "tpxGzkakeHw2XcbApX9Mg",
                        "fields": entry_data
                    }
                )
                
                if entry:
                    logger.info(f"–ó–∞–ø–∏—Å—å –≤ Contentful —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {entry_title}")
                    return {
                        "success": True,
                        "entryId": entry.id,
                        "title": entry_title,
                        "url": f"https://app.contentful.com/spaces/{self.space_id}/entries/{entry.id}",
                        "content": entry_data
                    }
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Management API")
                    return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Contentful: {e}")
            return None
    
    def publish_entry(self, entry_id: str) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ Contentful —á–µ—Ä–µ–∑ Management API
        
        Args:
            entry_id: ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            logger.info(f"–ü—É–±–ª–∏–∫—É—é –∑–∞–ø–∏—Å—å {entry_id}...")
            
            if self.test_mode:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏–º–∏—Ç–∏—Ä—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–ø–∏—Å–∏ {entry_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ
                test_file = f"test_entries/{entry_id}.json"
                if os.path.exists(test_file):
                    with open(test_file, 'r', encoding='utf-8') as f:
                        test_data = json.load(f)
                    
                    test_data["status"] = "published"
                    test_data["published_at"] = datetime.now().isoformat()
                    
                    with open(test_file, 'w', encoding='utf-8') as f:
                        json.dump(test_data, f, ensure_ascii=False, indent=2)
                    
                    logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å {entry_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                    return True
                else:
                    logger.warning(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
            else:
                # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –ø—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ Management API
                entry = self.environment.entries().find(entry_id)
                published_entry = entry.publish()
                
                if published_entry:
                    logger.info(f"–ó–∞–ø–∏—Å—å {entry_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                    return True
                else:
                    logger.error(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ {entry_id} –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
            return False
    
    def get_entries(self, limit: int = 10) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ Contentful
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–ø–∏—Å—è–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"–ü–æ–ª—É—á–∞—é {limit} –∑–∞–ø–∏—Å–µ–π –∏–∑ Contentful...")
            
            if self.test_mode:
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                logger.info("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —á–∏—Ç–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏")
                
                test_entries = []
                test_dir = "test_entries"
                
                if os.path.exists(test_dir):
                    for filename in os.listdir(test_dir):
                        if filename.endswith('.json'):
                            file_path = os.path.join(test_dir, filename)
                            try:
                                with open(file_path, 'r', encoding='utf-8') as f:
                                    entry_data = json.load(f)
                                test_entries.append(entry_data)
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                test_entries.sort(key=lambda x: x.get('created_at', ''), reverse=True)
                
                return {
                    "total": len(test_entries),
                    "limit": limit,
                    "items": test_entries[:limit]
                }
            else:
                                    # –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ Management API
                    entries = self.environment.entries().all({"limit": limit})
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
                    entries_data = []
                    for entry in entries:
                        try:
                            entry_dict = {
                                "id": entry.id,
                                "title": entry.fields.get("title", {}).get("en-US", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") if hasattr(entry.fields, 'get') else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                                "description": entry.fields.get("description", {}).get("en-US", "") if hasattr(entry.fields, 'get') else "",
                                "imageUrl": entry.fields.get("imageUrl", {}).get("en-US", "") if hasattr(entry.fields, 'get') else "",
                                "prompt": entry.fields.get("prompt", {}).get("en-US", "") if hasattr(entry.fields, 'get') else "",
                                "generationDate": entry.fields.get("generationDate", {}).get("en-US", "") if hasattr(entry.fields, 'get') else "",
                                "created_at": str(entry.created_at) if hasattr(entry, 'created_at') else "",
                                "updated_at": str(entry.updated_at) if hasattr(entry, 'updated_at') else ""
                            }
                            entries_data.append(entry_dict)
                        except Exception as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {entry.id}: {e}")
                            continue
                    
                    return {
                        "total": len(entries),
                        "limit": limit,
                        "items": entries_data
                    }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
            return None
    
    def upload_image_asset(self, image_url: str, title: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Asset –≤ Contentful
        
        Args:
            image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            title: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º Asset –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if self.test_mode:
                logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏–º–∏—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {title}")
                return {
                    "id": f"test-asset-{datetime.now().strftime('%Y%m%d-%H%M%S')}",
                    "url": image_url,
                    "title": title,
                    "test_mode": True
                }
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            import requests
            response = requests.get(image_url, timeout=30)
            if response.status_code != 200:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {response.status_code}")
                return None
            
            image_data = response.content
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            import mimetypes
            mime_type, _ = mimetypes.guess_type(image_url)
            if not mime_type:
                mime_type = "image/png"
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Upload API
            import tempfile
            import os
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
                temp_file.write(image_data)
                temp_file_path = temp_file.name
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Upload API
                upload = self.client.uploads(self.space_id).create(temp_file_path)
                logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ Upload API: {upload.id}")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file_path)
            
            # –°–æ–∑–¥–∞–µ–º Asset –≤ Contentful —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            asset = self.environment.assets().create(
                None,  # ID –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                {
                    'fields': {
                        'title': {
                            'en-US': title,
                            'de-DE': title
                        },
                        'description': {
                            'en-US': f'AI-generated cat image: {title}',
                            'de-DE': f'AI-generiertes Katzenbild: {title}'
                        },
                        'file': {
                            'en-US': {
                                'contentType': mime_type,
                                'fileName': f'{title.replace(" ", "_")}.png',
                                'upload': upload.id
                            },
                            'de-DE': {
                                'contentType': mime_type,
                                'fileName': f'{title.replace(" ", "_")}.png',
                                'upload': upload.id
                            }
                        }
                    }
                }
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º Asset
            asset.save()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Asset
            asset.process()
            
            # –ü—É–±–ª–∏–∫—É–µ–º Asset
            published_asset = asset.publish()
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Contentful: {title}")
            return {
                "id": published_asset.id,
                "url": published_asset.url(),
                "title": title,
                "test_mode": False
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def test_connection(self) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Contentful
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            if self.test_mode:
                return {
                    "success": True,
                    "mode": "test",
                    "message": "Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
                    "details": {
                        "space_id": "test-space",
                        "environment_id": "test-env",
                        "test_entries_count": len(os.listdir("test_entries")) if os.path.exists("test_entries") else 0
                    }
                }
            else:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                space = self.client.spaces().find(self.space_id)
                environment = space.environments().find(self.environment_id)
                
                return {
                    "success": True,
                    "mode": "production",
                    "message": "Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ",
                    "details": {
                        "space_id": self.space_id,
                        "environment_id": self.environment_id,
                        "space_name": space.name,
                        "environment_name": environment.name
                    }
                }
                
        except Exception as e:
            return {
                "success": False,
                "mode": "error",
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Contentful: {e}",
                "details": {
                    "error": str(e),
                    "space_id": self.space_id,
                    "environment_id": self.environment_id
                }
            }

def test_contentful_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        contentful = ContentfulIntegration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection_test = contentful.test_connection()
        logger.info(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_test['message']}")
        
        if connection_test['success']:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            test_result = contentful.create_cat_entry(
                cat_image_url="http://localhost:8000/images/fusionbrain_1755542689.png",
                cat_prompt="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—Ç–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                cat_description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ—Ç–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
            )
            
            if test_result and test_result.get('success'):
                logger.info("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"   ID –∑–∞–ø–∏—Å–∏: {test_result.get('entryId')}")
                logger.info(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {test_result.get('title')}")
                logger.info(f"   URL: {test_result.get('url')}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                if contentful.publish_entry(test_result.get('entryId')):
                    logger.info("‚úÖ –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
                entries = contentful.get_entries(limit=5)
                if entries:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {entries.get('total', 0)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏")
                
            else:
                logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
                
        else:
            logger.warning("‚ö†Ô∏è Contentful –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    test_contentful_integration()
