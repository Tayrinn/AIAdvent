import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class TestRunner {
    
    suspend fun runTests(): TestReport = withContext(Dispatchers.IO) {
        val report = TestReport()
        val startTime = System.currentTimeMillis()
        
        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã
            runUnitTests(report)
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            runIntegrationTests(report)
            
        } catch (e: Exception) {
            report.addError("Test execution failed: ${e.message}")
        }
        
        val endTime = System.currentTimeMillis()
        report.executionTime = endTime - startTime
        
        return@withContext report
    }
    
    private fun runUnitTests(report: TestReport) {
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
            testModels(report)
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
            testUtils(report)
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            testBasicFunctionality(report)
            
        } catch (e: Exception) {
            report.addError("Unit tests failed: ${e.message}")
        }
    }
    
    private fun runIntegrationTests(report: TestReport) {
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            report.addPassedTest("Basic integration test")
            
        } catch (e: Exception) {
            report.addError("Integration tests failed: ${e.message}")
        }
    }
    
    private fun testModels(report: TestReport) {
        try {
            // –¢–µ—Å—Ç ChatMessage
            val message = ChatMessage(
                content = "Test message",
                isUser = true
            )
            if (message.content == "Test message" && message.isUser) {
                report.addPassedTest("ChatMessage creation")
            } else {
                report.addFailedTest("ChatMessage creation")
            }
            
            // –¢–µ—Å—Ç ApiLimits
            val limits = ApiLimits(
                remainingGenerations = 95,
                totalGenerations = 100
            )
            if (limits.remainingGenerations == 95 && limits.totalGenerations == 100) {
                report.addPassedTest("ApiLimits creation")
            } else {
                report.addFailedTest("ApiLimits creation")
            }
            
            // –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π ApiLimits
            if (limits.usedGenerations == 5) {
                report.addPassedTest("ApiLimits calculations")
            } else {
                report.addFailedTest("ApiLimits calculations")
            }
            
        } catch (e: Exception) {
            report.addFailedTest("Models test: ${e.message}")
        }
    }
    
    private fun testUtils(report: TestReport) {
        try {
            // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val imageRequest = "Generate an image of a cat"
            val regularRequest = "Hello, how are you?"
            
            if (isImageGenerationRequest(imageRequest)) {
                report.addPassedTest("Image generation request detection")
            } else {
                report.addFailedTest("Image generation request detection")
            }
            
            if (!isImageGenerationRequest(regularRequest)) {
                report.addPassedTest("Regular request detection")
            } else {
                report.addFailedTest("Regular request detection")
            }
            
        } catch (e: Exception) {
            report.addFailedTest("Utils test: ${e.message}")
        }
    }
    
    private fun testBasicFunctionality(report: TestReport) {
        try {
            // –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            val imageRequests = listOf(
                "Generate an image of a cat",
                "Create a picture of a dog",
                "Make an image of a bird"
            )
            
            val regularRequests = listOf(
                "Hello, how are you?",
                "What's the weather like?",
                "Tell me a joke"
            )
            
            imageRequests.forEach { request ->
                if (isImageGenerationRequest(request)) {
                    report.addPassedTest("Image request detection: $request")
                } else {
                    report.addFailedTest("Image request detection failed: $request")
                }
            }
            
            regularRequests.forEach { request ->
                if (!isImageGenerationRequest(request)) {
                    report.addPassedTest("Regular request detection: $request")
                } else {
                    report.addFailedTest("Regular request detection failed: $request")
                }
            }
            
            // –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            val testLimits = ApiLimits(remainingGenerations = 75, totalGenerations = 100)
            if (testLimits.usedGenerations == 25 && testLimits.usagePercentage == 25.0f) {
                report.addPassedTest("ApiLimits calculations")
            } else {
                report.addFailedTest("ApiLimits calculations failed")
            }
            
        } catch (e: Exception) {
            report.addFailedTest("Basic functionality test: ${e.message}")
        }
    }
    
    private fun isImageGenerationRequest(text: String): Boolean {
        val lowerText = text.lowercase()
        return lowerText.contains("generate") || 
               lowerText.contains("create") || 
               lowerText.contains("make") || 
               lowerText.contains("draw") || 
               lowerText.contains("picture") || 
               lowerText.contains("image")
    }
}

data class TestReport(
    var passedTests: Int = 0,
    var failedTests: Int = 0,
    var errors: MutableList<String> = mutableListOf(),
    var executionTime: Long = 0
) {
    fun addPassedTest(testName: String) {
        passedTests++
        println("‚úÖ PASSED: $testName")
    }
    
    fun addFailedTest(testName: String) {
        failedTests++
        println("‚ùå FAILED: $testName")
    }
    
    fun addError(error: String) {
        errors.add(error)
        println("üö® ERROR: $error")
    }
    
    fun getSummary(): String {
        val totalTests = passedTests + failedTests
        val successRate = if (totalTests > 0) (passedTests * 100.0 / totalTests) else 0.0
        
        return buildString {
            appendLine("üß™ **TEST REPORT**")
            appendLine()
            appendLine("üìä **Summary:**")
            appendLine("   ‚úÖ Passed: $passedTests")
            appendLine("   ‚ùå Failed: $failedTests")
            appendLine("   üìà Success Rate: ${String.format("%.1f", successRate)}%")
            appendLine("   ‚è±Ô∏è Execution Time: ${executionTime}ms")
            appendLine()
            
            if (errors.isNotEmpty()) {
                appendLine("üö® **Errors:**")
                errors.forEach { error ->
                    appendLine("   ‚Ä¢ $error")
                }
                appendLine()
            }
            
            appendLine("üéØ **Status:** ${if (failedTests == 0) "ALL TESTS PASSED" else "SOME TESTS FAILED"}")
        }
    }
}
