name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: true
        type: boolean
        default: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Run tests
        run: ./gradlew test
        env:
          GRADLE_OPTS: -Dorg.gradle.java.installations.auto-download=true

      - name: Generate test report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Test Results
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build for ${{ matrix.os }}
        run: ./gradlew build
        env:
          GRADLE_OPTS: -Dorg.gradle.java.installations.auto-download=true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            desktop/build/compose/binaries/main/app/
            shared/build/libs/
            app/build/outputs/apk/

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v5

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          # Generate changelog from commits
          if [ "$LATEST_TAG" != "$CURRENT_TAG" ]; then
            echo "## Changes in $CURRENT_TAG" > changelog.md
            echo "" >> changelog.md

            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" "$LATEST_TAG..HEAD" >> changelog.md
          else
            echo "## Initial Release $CURRENT_TAG" > changelog.md
            echo "" >> changelog.md
            echo "- Initial release with Hugging Face integration" >> changelog.md
            echo "- Desktop chat application" >> changelog.md
            echo "- Android mobile app" >> changelog.md
          fi

          # Read changelog content
          {
            echo 'CHANGELOG<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          release_name: Release ${{ github.event.inputs.version || github.ref_name }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ contains(github.event.inputs.version || github.ref_name, 'rc') || contains(github.event.inputs.version || github.ref_name, 'beta') || contains(github.event.inputs.version || github.ref_name, 'alpha') }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build-artifacts/AIAdvent-${{ github.event.inputs.version || github.ref_name }}.jar
          asset_name: AIAdvent-${{ github.event.inputs.version || github.ref_name }}.jar
          asset_content_type: application/java-archive
