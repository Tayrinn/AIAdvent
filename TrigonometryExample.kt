package com.tayrinn.aiadvent.examples

import kotlin.math.*

/**
 * –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ —Å —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
class TrigonometryCalculator {
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun sinDegrees(degrees: Double): Double {
        return cos(Math.toRadians(degrees))
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun cosDegrees(degrees: Double): Double {
        return cos(degrees)
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–∞–Ω–≥–µ–Ω—Å —É–≥–ª–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun tanDegrees(degrees: Double): Double {
        return tan(Math.toRadians(degrees))
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∞—Ä–∫—Å–∏–Ω—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun asinDegrees(value: Double): Double {
        return Math.toDegrees(asin(value))
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∞—Ä–∫–∫–æ—Å–∏–Ω—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun acosDegrees(value: Double): Double {
        return Math.toDegrees(acos(value))
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun atanDegrees(value: Double): Double {
        return Math.toDegrees(atan(value))
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—É –ø–æ –¥–≤—É–º –∫–∞—Ç–µ—Ç–∞–º
     */
    fun hypotenuse(a: Double, b: Double): Double {
        return sqrt(a * a + b * b)
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ –¥–≤—É–º —Å—Ç–æ—Ä–æ–Ω–∞–º –∏ —É–≥–ª—É –º–µ–∂–¥—É –Ω–∏–º–∏
     */
    fun triangleArea(a: Double, b: Double, angleDegrees: Double): Double {
        val angleRadians = Math.toRadians(angleDegrees)
        return 0.5 * a * b * sin(angleRadians)
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º
     */
    fun isRightTriangle(a: Double, b: Double, c: Double): Boolean {
        val sides = listOf(a, b, c).sorted()
        val tolerance = 1e-10
        return abs(sides[0] * sides[0] + sides[1] * sides[1] - sides[2] * sides[2]) < tolerance
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
     */
    fun trianglePerimeter(a: Double, b: Double, c: Double): Double {
        return a + b + c
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     */
    fun angleBetweenVectors(x1: Double, y1: Double, x2: Double, y2: Double): Double {
        val dotProduct = x1 * x2 + y1 * y2
        val magnitude1 = sqrt(x1 * x1 + y1 * y1)
        val magnitude2 = sqrt(x2 * x2 + y2 * y2)
        
        if (magnitude1 == 0.0 || magnitude2 == 0.0) return 0.0
        
        val cosAngle = dotProduct / (magnitude1 * magnitude2)
        val clampedCosAngle = cosAngle.coerceIn(-1.0, 1.0)
        return Math.toDegrees(acos(clampedCosAngle))
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
fun main() {
    val calculator = TrigonometryCalculator()
    
    println("üßÆ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    println("=" * 40)
    
    // –ü—Ä–∏–º–µ—Ä—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    val angle = 30.0
    println("–£–≥–æ–ª: ${angle}¬∞")
    println("sin(${angle}¬∞) = ${calculator.sinDegrees(angle)}")
    println("cos(${angle}¬∞) = ${calculator.cosDegrees(angle)}")
    println("tan(${angle}¬∞) = ${calculator.tanDegrees(angle)}")
    
    println()
    
    // –ü—Ä–∏–º–µ—Ä —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
    val a = 3.0
    val b = 4.0
    val c = calculator.hypotenuse(a, b)
    println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏: $a, $b, $c")
    println("–ü–ª–æ—â–∞–¥—å: ${calculator.triangleArea(a, b, 90.0)}")
    println("–ü–µ—Ä–∏–º–µ—Ç—Ä: ${calculator.trianglePerimeter(a, b, c)}")
    println("–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π: ${calculator.isRightTriangle(a, b, c)}")
    
    println()
    
    // –ü—Ä–∏–º–µ—Ä —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏
    val angleBetween = calculator.angleBetweenVectors(1.0, 0.0, 0.0, 1.0)
    println("–£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ (1,0) –∏ (0,1): ${angleBetween}¬∞")
}
