#!/usr/bin/env python3
"""
Daily Cat Generator Service
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ email
"""

import os
import time
import requests
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
from datetime import datetime
import logging
from dotenv import load_dotenv
from contentful_integration import ContentfulIntegration

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('daily_cat_generator.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DailyCatGenerator:
    def __init__(self):
        # URL MCP —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MCP_SERVER_URL
        # –í docker-compose –≤—ã—Å—Ç–∞–≤–∏–º http://mcp-server:8000 –¥–ª—è –º–µ–∂–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.mcp_server_url = os.getenv("MCP_SERVER_URL", "http://localhost:8000")
        self.email = "aver.kev@gmail.com"
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        
        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å app password –≤ Gmail)
        self.smtp_username = os.getenv("GMAIL_USERNAME")
        self.smtp_password = os.getenv("GMAIL_APP_PASSWORD")
        
        # –°—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        self.remaining_generations = int(os.getenv("REMAINING_GENERATIONS", "91"))
        self.total_generations = int(os.getenv("TOTAL_GENERATIONS", "100"))
        
        # Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        try:
            self.contentful = ContentfulIntegration()
            logger.info("Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.contentful = None
        
    def generate_cat_image(self, prompt: str = None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (image_url, prompt)."""
        try:
            logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞...")
            
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
            if not prompt:
                # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤
                cat_prompts = [
                    "adorable fluffy cat with big eyes, sitting in a cozy basket, soft lighting, high quality",
                    "cute kitten playing with yarn, warm colors, detailed fur, studio lighting",
                    "sleepy cat on a windowsill, golden hour, peaceful atmosphere, high resolution",
                    "curious cat looking at camera, green eyes, natural background, professional photo",
                    "happy cat with bow tie, elegant pose, studio background, premium quality"
                ]
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                import random
                prompt = random.choice(cat_prompts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            response = requests.post(
                f"{self.mcp_server_url}/generate",
                json={
                    "type": "GENERATE",
                    "style": "DEFAULT",
                    "width": 1024,
                    "height": 1024,
                    "numImages": 1,
                    "generateParams": {
                        "query": prompt
                    }
                },
                timeout=120
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get("imageUrl"):
                    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {data['imageUrl']}")
                    return data["imageUrl"], prompt
                else:
                    logger.error("–ù–µ –ø–æ–ª—É—á–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    return None, prompt
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None, prompt
    
    def download_image(self, image_url):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        try:
            logger.info(f"–°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
            response = requests.get(image_url, timeout=30)
            if response.status_code == 200:
                return response.content
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {response.status_code}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None
    
    def decrease_generations_count(self):
        """–£–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        self.remaining_generations = max(0, self.remaining_generations - 1)
        logger.info(f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {self.remaining_generations}/{self.total_generations}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ .env —Ñ–∞–π–ª
        self.update_env_file()
    
    def update_env_file(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
        try:
            env_file = ".env"
            if os.path.exists(env_file):
                with open(env_file, 'r') as f:
                    lines = f.readlines()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                updated_lines = []
                for line in lines:
                    if line.startswith("REMAINING_GENERATIONS="):
                        updated_lines.append(f"REMAINING_GENERATIONS={self.remaining_generations}\n")
                    elif line.startswith("TOTAL_GENERATIONS="):
                        updated_lines.append(f"TOTAL_GENERATIONS={self.total_generations}\n")
                    else:
                        updated_lines.append(line)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(env_file, 'w') as f:
                    f.writelines(updated_lines)
                
                logger.info("–§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
    
    def send_email_report(self, image_data, prompt):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ email"""
        try:
            if not self.smtp_username or not self.smtp_password:
                logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã SMTP —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart()
            msg['From'] = self.smtp_username
            msg['To'] = self.email
            msg['Subject'] = f"üê± –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫ - {datetime.now().strftime('%d.%m.%Y')}"
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            body = f"""
            <html>
            <body>
                <h2>üê± –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫ –≥–æ—Ç–æ–≤!</h2>
                <p><strong>–î–∞—Ç–∞:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
                <p><strong>–ü—Ä–æ–º–ø—Ç:</strong> {prompt}</p>
                <p><strong>–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</strong> {self.remaining_generations}/{self.total_generations}</p>
                <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</strong> {self.total_generations - self.remaining_generations}</p>
                
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
                <ul>
                    <li>–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {self.total_generations}</li>
                    <li>–û—Å—Ç–∞–ª–æ—Å—å: {self.remaining_generations}</li>
                    <li>–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {((self.total_generations - self.remaining_generations) / self.total_generations * 100):.1f}%</li>
                </ul>
                
                <h3>üåê Contentful:</h3>
                <ul>
                    <li>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: ‚úÖ –î–∞</li>
                    <li>–ó–∞–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: ‚úÖ –î–∞</li>
                    <li>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: daily-cats</li>
                    <li>–¢–µ–≥–∏: –∫–æ—Ç–∏–∫, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, AI, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</li>
                </ul>
                
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>Daily Cat Generator Service üêæ</p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if image_data:
                image = MIMEImage(image_data)
                image.add_header('Content-ID', '<cat_image>')
                image.add_header('Content-Disposition', 'inline', filename='daily_cat.png')
                msg.attach(image)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)
            
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {self.email}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")
            return False
    
    def run_daily_generation(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–∏–∫–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if self.remaining_generations <= 0:
                logger.warning("‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω!")
                self.send_limit_exceeded_email()
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞
            image_url, used_prompt = self.generate_cat_image()
            if not image_url:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = self.download_image(image_url)
            if not image_data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            self.decrease_generations_count()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Contentful
            if self.contentful:
                try:
                    cat_description = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ—Ç–∏–∫, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {datetime.now().strftime('%d.%m.%Y')} –≤ {datetime.now().strftime('%H:%M')}. –ü—Ä–æ–º–ø—Ç: {used_prompt}"
                    contentful_result = self.contentful.create_cat_entry(image_url, used_prompt, cat_description)
                    
                    if contentful_result:
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Contentful —Å–æ–∑–¥–∞–Ω–∞: {contentful_result['title']}")
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                        if self.contentful.publish_entry(contentful_result['entryId']):
                            logger.info("‚úÖ –ó–∞–ø–∏—Å—å –≤ Contentful –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                        else:
                            logger.warning("‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    else:
                        logger.warning("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Contentful –Ω–µ —É–¥–∞–ª–æ—Å—å")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Contentful: {e}")
            else:
                logger.info("‚ÑπÔ∏è Contentful –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –Ω–∞ email
            if self.send_email_report(image_data, used_prompt):
                logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def send_limit_exceeded_email(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        try:
            msg = MIMEMultipart()
            msg['From'] = self.smtp_username
            msg['To'] = self.email
            msg['Subject'] = "‚ö†Ô∏è –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Kandinsky API –∏—Å—á–µ—Ä–ø–∞–Ω!"
            
            body = f"""
            <html>
            <body>
                <h2>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</h2>
                <p>–õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Kandinsky API –∏—Å—á–µ—Ä–ø–∞–Ω.</p>
                <p><strong>–î–∞—Ç–∞:</strong> {datetime.now().strftime('%d.%m.%Y %H:%:%S')}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {self.remaining_generations}/{self.total_generations}</p>
                
                <h3>üîß –ß—Ç–æ –¥–µ–ª–∞—Ç—å:</h3>
                <ul>
                    <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ Segmind</li>
                    <li>–û–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ</li>
                    <li>–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</li>
                </ul>
                
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>Daily Cat Generator Service üêæ</p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)
            
            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    generator = DailyCatGenerator()
    generator.run_daily_generation()
