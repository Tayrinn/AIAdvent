package com.tayrinn.aiadvent.ui.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.tayrinn.aiadvent.data.model.ChatMessage
import com.tayrinn.aiadvent.data.model.ApiLimits
import com.tayrinn.aiadvent.data.repository.ChatRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class ChatViewModel(
    private val repository: ChatRepository
) : ViewModel() {
    
    companion object {
        private const val TAG = "ChatViewModel"
    }
    
    private val _messages = MutableStateFlow<List<ChatMessage>>(emptyList())
    val messages: StateFlow<List<ChatMessage>> = _messages.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
                    private val _isGeneratingImage = MutableStateFlow(false)
                val isGeneratingImage: StateFlow<Boolean> = _isGeneratingImage.asStateFlow()

                private val _apiLimits = MutableStateFlow<ApiLimits?>(null)
                val apiLimits: StateFlow<ApiLimits?> = _apiLimits.asStateFlow()
    
    init {
        Log.d(TAG, "ChatViewModel init called")
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ß–ò–©–ê–ï–ú –ë–î –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–ü–£–°–ö–ï
        viewModelScope.launch {
            try {
                Log.d(TAG, "FORCING DATABASE CLEAR ON FIRST LAUNCH")
                repository.clearMessages()
                Log.d(TAG, "Database cleared successfully on first launch")
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                val testMessage = ChatMessage(
                    content = "üöÄ **FIRST LAUNCH TEST:** Database cleared and ready!",
                    isUser = false,
                    isAgent1 = true
                )
                repository.insertMessage(testMessage)
                Log.d(TAG, "Test message added after DB clear")
                
            } catch (e: Exception) {
                Log.e(TAG, "Error clearing DB on first launch: ${e.message}")
            }
        }
        
                            // –ü–û–î–ü–ò–°–´–í–ê–ï–ú–°–Ø –ù–ê FLOW –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –û–ë–ù–û–í–õ–ï–ù–ò–ô
                    viewModelScope.launch {
                        repository.getAllMessages().collect { messages ->
                            Log.d(TAG, "Flow update received: ${messages.size} messages")
                            _messages.value = messages
                        }
                    }
                    
                    // –ó–ê–ì–†–£–ñ–ê–ï–ú –õ–ò–ú–ò–¢–´ API
                    viewModelScope.launch {
                        loadApiLimits()
                    }
    }
    
    override fun onCleared() {
        super.onCleared()
        Log.d(TAG, "ChatViewModel onCleared called")
    }
    
    fun sendMessage(content: String) {
        if (content.isBlank()) return
        
        val userMessage = ChatMessage(
            content = content,
            isUser = true
        )
        
        viewModelScope.launch {
            try {
                repository.insertMessage(userMessage)
                _isLoading.value = true
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                when {
                    content.lowercase().contains("run tests") -> {
                        runTests()
                    }
                    isImageGenerationRequest(content) -> {
                        generateImage(content)
                    }
                    else -> {
                        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤
                        val (agent1Response, agent2Response) = repository.sendMessage(content, _messages.value, null)
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ê–≥–µ–Ω—Ç–∞ 1
                        val agent1Message = ChatMessage(
                            content = "ü§ñ **Agent 1:** $agent1Response",
                            isUser = false,
                            isAgent1 = true
                        )
                        repository.insertMessage(agent1Message)
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ê–≥–µ–Ω—Ç–∞ 2
                        val agent2Message = ChatMessage(
                            content = "üîç **Agent 2 (Enhancement):** $agent2Response",
                            isUser = false,
                            isAgent2 = true
                        )
                        repository.insertMessage(agent2Message)
                    }
                }
                
            } catch (e: Exception) {
                val errorMessage = ChatMessage(
                    content = "Error: ${e.message}",
                    isUser = false,
                    isError = true
                )
                repository.insertMessage(errorMessage)
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    private suspend fun runTests() {
        Log.d(TAG, "Running tests...")
        
        try {
            // –°–æ–∑–¥–∞–µ–º TestRunner
            val testRunner = com.tayrinn.aiadvent.util.TestRunner(repository.getContext())
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
            val testReport = testRunner.runTests()
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö
            val testMessage = ChatMessage(
                content = testReport.getSummary(),
                isUser = false,
                isTestReport = true
            )
            repository.insertMessage(testMessage)
            
            Log.d(TAG, "Tests completed: ${testReport.passedTests} passed, ${testReport.failedTests} failed")
            
        } catch (e: Exception) {
            Log.e(TAG, "Error running tests: ${e.message}")
            val errorMessage = ChatMessage(
                content = "Error running tests: ${e.message}",
                isUser = false,
                isError = true
            )
            repository.insertMessage(errorMessage)
        }
    }
    
    private suspend fun generateImage(prompt: String) {
        Log.d("ChatViewModel", "generateImage - Current thread: ${Thread.currentThread().name}")
        _isGeneratingImage.value = true
        
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            val imagePrompt = extractImagePrompt(prompt)
            Log.d("ChatViewModel", "Extracted prompt: $imagePrompt")
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω–µ
            Log.d("ChatViewModel", "Calling repository.generateImage...")
            val result = withContext(Dispatchers.IO) {
                repository.generateImage(imagePrompt)
            }
            Log.d("ChatViewModel", "Repository result received")
            
                                    result.fold(
                            onSuccess = { imagePath ->
                                Log.d("ChatViewModel", "Image generated successfully: $imagePath")
                                // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∏–º–∏—Ç–æ–≤
                                repository.decreaseApiLimits()
                                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
                                loadApiLimits()
                                
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                                val imageMessage = ChatMessage(
                                    content = "üé® **Generated Image:** $imagePrompt",
                                    isUser = false,
                                    isImageGeneration = true,
                                    imageUrl = imagePath,
                                    imagePrompt = imagePrompt
                                )
                                repository.insertMessage(imageMessage)
                            },
                onFailure = { exception ->
                    Log.e("ChatViewModel", "Image generation failed: ${exception.message}")
                    val errorMessage = ChatMessage(
                        content = "Error generating image: ${exception.message}",
                        isUser = false,
                        isError = true
                    )
                    repository.insertMessage(errorMessage)
                }
            )
            
        } catch (e: Exception) {
            Log.e("ChatViewModel", "Exception in generateImage: ${e.message}")
            val errorMessage = ChatMessage(
                content = "Error: ${e.message}",
                isUser = false,
                isError = true
            )
            repository.insertMessage(errorMessage)
        } finally {
            _isGeneratingImage.value = false
            Log.d("ChatViewModel", "generateImage completed")
        }
    }
    
    private fun isImageGenerationRequest(content: String): Boolean {
        val lowerContent = content.lowercase()
        return lowerContent.contains("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π") && 
               (lowerContent.contains("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") || lowerContent.contains("–∫–∞—Ä—Ç–∏–Ω–∫—É") || lowerContent.contains("—Ä–∏—Å—É–Ω–æ–∫")) ||
               lowerContent.contains("generate") && 
               (lowerContent.contains("image") || lowerContent.contains("picture") || lowerContent.contains("drawing"))
    }
    
    private fun extractImagePrompt(content: String): String {
        // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
        val lowerContent = content.lowercase()
        
        return when {
            lowerContent.contains("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") -> 
                content.replace("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "").trim()
            lowerContent.contains("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É") -> 
                content.replace("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "").trim()
            lowerContent.contains("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–∏—Å—É–Ω–æ–∫") -> 
                content.replace("—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–∏—Å—É–Ω–æ–∫", "").trim()
            lowerContent.contains("generate image") -> 
                content.replace("generate image", "").trim()
            lowerContent.contains("generate picture") -> 
                content.replace("generate picture", "").trim()
            lowerContent.contains("generate drawing") -> 
                content.replace("generate drawing", "").trim()
            else -> content.trim()
        }
    }
    
    fun loadMessages() {
        Log.d(TAG, "loadMessages called - Flow subscription already active")
        // Flow –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ init, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    }
    
    fun clearMessages() {
        viewModelScope.launch {
            try {
                Log.d(TAG, "clearMessages called")
                repository.clearMessages()
                Log.d(TAG, "Messages cleared successfully")

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                val testMessage = ChatMessage(
                    content = "üß™ **Test Message:** This is a test message to verify UI rendering works correctly!",
                    isUser = false,
                    isAgent1 = true
                )
                repository.insertMessage(testMessage)
                Log.d(TAG, "Test message added successfully")

            } catch (e: Exception) {
                Log.e(TAG, "Error clearing messages: ${e.message}")
            }
        }
    }
    
                    fun cancelImageGeneration() {
                    // –ü—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ - –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É
                    _isGeneratingImage.value = false
                    _isLoading.value = false
                }
                
                private suspend fun loadApiLimits() {
                    try {
                        Log.d(TAG, "Loading API limits...")
                        val limits = repository.getApiLimits()
                        _apiLimits.value = limits
                        Log.d(TAG, "API limits loaded: ${limits?.remainingGenerations}/${limits?.totalGenerations}")
                    } catch (e: Exception) {
                        Log.e(TAG, "Failed to load API limits: ${e.message}")
                    }
                }
                
                fun refreshApiLimits() {
                    viewModelScope.launch {
                        loadApiLimits()
                    }
                }
}
